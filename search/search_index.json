{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe0 Estrutura Workshop \u2014 Documenta\u00e7\u00e3o Principal","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o do projeto \"Como estruturar um projeto de dados do Zero\". Este projeto demonstra boas pr\u00e1ticas para desenvolvimento de pipelines ETL em Python.</p>"},{"location":"#sobre-o-projeto","title":"\ud83d\udcca Sobre o Projeto","text":"<p>Este reposit\u00f3rio \u00e9 uma estrutura padronizada para projetos de engenharia, ci\u00eancia e an\u00e1lise de dados, focando em:</p> <ul> <li>\u2705 Boas pr\u00e1ticas de desenvolvimento</li> <li>\ud83e\uddea Testes automatizados</li> <li>\ud83d\udcda Documenta\u00e7\u00e3o completa</li> <li>\ud83d\udd04 CI/CD e automa\u00e7\u00e3o</li> <li>\ud83d\udc0d Gerenciamento de ambientes Python</li> </ul>"},{"location":"#inicio-rapido","title":"\ud83d\ude80 In\u00edcio R\u00e1pido","text":"<pre><code>graph LR\n    A[\ud83d\udce5 Clone] --&gt; B[\ud83d\udc0d Poetry Install]\n    B --&gt; C[\ud83e\uddea Tests]\n    C --&gt; D[\u26a1 Execute Pipeline]\n    D --&gt; E[\ud83d\udcd6 Documenta\u00e7\u00e3o]</code></pre>"},{"location":"#passos-para-comecar","title":"Passos para come\u00e7ar:","text":"<ol> <li> <p>\ud83d\udce5 Clone o reposit\u00f3rio: <pre><code>git clone &lt;URL-DO-REPO&gt;\ncd estrutura_workshop\n</code></pre></p> </li> <li> <p>\ud83d\udc0d Instale depend\u00eancias: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>\ud83e\uddea Execute os testes: <pre><code>poetry run pytest -q\n</code></pre></p> </li> <li> <p>\u26a1 Execute o pipeline: <pre><code>poetry run python src/main.py\n</code></pre></p> </li> <li> <p>\ud83d\udcd6 Visualize a documenta\u00e7\u00e3o: <pre><code>poetry run mkdocs serve\n</code></pre></p> </li> </ol>"},{"location":"#resumo-e-links","title":"\ud83d\udccb Resumo e Links","text":"<p>Veja as p\u00e1ginas espec\u00edficas para guias passo a passo e explica\u00e7\u00f5es completas:</p>"},{"location":"#configuracao-do-ambiente","title":"\ud83d\udee0\ufe0f Configura\u00e7\u00e3o do Ambiente","text":"<ul> <li>\u2699\ufe0f Setup - Instala\u00e7\u00e3o do Python, Poetry e configura\u00e7\u00e3o inicial</li> <li>\ud83d\udd27 Pipeline - Vis\u00e3o detalhada do ETL (extract, transform, load)</li> <li>\ud83e\uddea Tests - Organiza\u00e7\u00e3o e execu\u00e7\u00e3o de testes</li> <li>\ud83d\ude80 CI - Workflows do GitHub Actions e integra\u00e7\u00e3o cont\u00ednua</li> <li>\ud83d\udc0d Pyenv - Gerenciamento de vers\u00f5es do Python</li> <li>\ud83d\udd0d Pre-commit - Configura\u00e7\u00e3o de hooks (black, isort)</li> <li>\ud83d\udcc2 Git - Configura\u00e7\u00e3o do Git e boas pr\u00e1ticas</li> </ul>"},{"location":"#documentacao-do-codigo","title":"\ud83d\udcbb Documenta\u00e7\u00e3o do C\u00f3digo","text":"<ul> <li>\ud83d\udcd6 Overview - Vis\u00e3o geral da arquitetura do pipeline</li> <li>\ud83c\udfaf Main - M\u00f3dulo principal do pipeline</li> <li>\ud83d\udce5 Extract - Extra\u00e7\u00e3o de dados de arquivos Excel</li> <li>\ud83d\udd04 Transform - Transforma\u00e7\u00e3o e concatena\u00e7\u00e3o de dados</li> <li>\ud83d\udce4 Load - Carregamento e salvamento dos resultados</li> </ul>"},{"location":"#solucao-de-problemas","title":"\ud83c\udd98 Solu\u00e7\u00e3o de Problemas","text":"<p>Se algo n\u00e3o estiver funcionando localmente (exemplo: <code>mkdocs serve</code> retornando erro), consulte a se\u00e7\u00e3o de troubleshooting em cada p\u00e1gina espec\u00edfica ou verifique:</p> <ul> <li>\u2705 Python 3.12.7 est\u00e1 instalado</li> <li>\u2705 Poetry est\u00e1 configurado corretamente</li> <li>\u2705 Depend\u00eancias foram instaladas: <code>poetry install</code></li> <li>\u2705 Ambiente virtual est\u00e1 ativo: <code>poetry shell</code></li> </ul> <p>Documenta\u00e7\u00e3o atualizada em 2025-10-16</p>"},{"location":"ci/","title":"\ud83d\ude80 CI \u2014 Integra\u00e7\u00e3o e Entrega Cont\u00ednua","text":"<p>Esta p\u00e1gina explica os workflows do GitHub Actions configurados para automatizar testes, verifica\u00e7\u00f5es de qualidade e deployment.</p>"},{"location":"ci/#visao-geral-do-cicd","title":"\ud83c\udfaf Vis\u00e3o Geral do CI/CD","text":"<p>O projeto utiliza GitHub Actions para:</p> <ul> <li>\u2705 Execu\u00e7\u00e3o autom\u00e1tica de testes</li> <li>\ud83d\udd0d Verifica\u00e7\u00e3o de qualidade de c\u00f3digo</li> <li>\ud83d\udcca Relat\u00f3rios de cobertura</li> <li>\ud83d\udd04 Cria\u00e7\u00e3o autom\u00e1tica de Pull Requests</li> <li>\ud83d\ude80 Deployment da documenta\u00e7\u00e3o</li> </ul>"},{"location":"ci/#workflows-configurados","title":"\ud83d\udccb Workflows Configurados","text":""},{"location":"ci/#1-ciyml-pipeline-principal","title":"\ud83d\udd27 1. <code>ci.yml</code> \u2014 Pipeline Principal","text":"<p>\ud83d\udcc5 Quando executa: Push e Pull Requests para <code>main</code> e <code>dev</code></p> <pre><code>graph LR\n    A[\ud83d\udce5 Push/PR] --&gt; B[\ud83d\udc0d Setup Python]\n    B --&gt; C[\ud83d\udce6 Install Deps]\n    C --&gt; D[\ud83c\udfa8 Check Format]\n    D --&gt; E[\ud83e\uddea Run Tests]\n    E --&gt; F[\ud83d\udcca Coverage Report]\n    F --&gt; G[\u2601\ufe0f Upload Codecov]\n\n    style A fill:#e3f2fd\n    style E fill:#e8f5e8\n    style G fill:#fff3e0</code></pre> <p>\ud83d\udd27 Configura\u00e7\u00e3o: - \ud83d\udc0d Python: 3.12 no Ubuntu - \ud83d\udce6 Depend\u00eancias: pandas, openpyxl, pytest, black, isort - \ud83c\udfa8 Formata\u00e7\u00e3o: <code>black --check</code> - \ud83e\uddea Testes: <code>pytest</code> com cobertura - \ud83d\udcca Cobertura: Upload para Codecov (se token configurado)</p> <p>\ud83d\udd11 Secrets Necess\u00e1rios: - <code>CODECOV_TOKEN</code> (opcional) - <code>ACTIONS_PUSH_TOKEN</code> (se necess\u00e1rio)</p>"},{"location":"ci/#2-push-create-pryml-prs-automaticos","title":"\ud83d\udd00 2. <code>push-create-pr.yml</code> \u2014 PRs Autom\u00e1ticos","text":"<p>\ud83d\udcc5 Quando executa: Push em branches <code>feature/**</code> e <code>test/**</code></p> <pre><code>graph LR\n    A[\ud83d\udce5 Push Feature] --&gt; B[\ud83e\uddea Run Tests]\n    B --&gt; C[\u2705 Tests Pass]\n    C --&gt; D[\ud83d\udd00 Create PR to Dev]\n\n    style A fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#e1f5fe</code></pre> <p>\u2699\ufe0f Funcionalidades: - \ud83e\uddea Executa testes na branch feature - \ud83d\udd00 Cria PR automaticamente para <code>dev</code> - \ud83d\udd04 Atualiza PR existente se j\u00e1 criado</p> <p>\ud83d\udd11 Permiss\u00f5es: <code>contents: write</code>, <code>pull-requests: write</code></p>"},{"location":"ci/#3-create-pr-dev-to-mainyml-deploy-para-main","title":"\ud83d\udd04 3. <code>create-pr-dev-to-main.yml</code> \u2014 Deploy para Main","text":"<p>\ud83d\udcc5 Quando executa: PRs envolvendo branch <code>dev</code></p> <pre><code>graph LR\n    A[\ud83d\udce5 PR to Dev] --&gt; B[\ud83e\uddea Test on PR]\n    B --&gt; C{\ud83d\udd00 PR Merged?}\n    C --&gt;|\u2705 Yes| D[\ud83d\ude80 Create PR to Main]\n    C --&gt;|\u274c No| E[\u23f9\ufe0f Stop]\n\n    style A fill:#f3e5f5\n    style B fill:#e8f5e8\n    style D fill:#ffebee</code></pre> <p>\u2699\ufe0f Funcionalidades: - \ud83e\uddea Testa PRs para <code>dev</code> - \ud83d\ude80 Cria PR <code>dev \u2192 main</code> automaticamente ap\u00f3s merge - \ud83d\udcdd Usa template <code>.github/PULL_REQUEST_TEMPLATE.md</code></p>"},{"location":"ci/#configuracao-e-setup","title":"\ud83d\udd27 Configura\u00e7\u00e3o e Setup","text":""},{"location":"ci/#1-configurar-secrets","title":"\ud83d\udd11 1. Configurar Secrets","text":"<p>Acesse: Settings \u2192 Secrets and variables \u2192 Actions</p>"},{"location":"ci/#para-codecov-opcional","title":"\ud83d\udcca Para Codecov (Opcional):","text":"<pre><code># Obtenha o token em codecov.io\nCODECOV_TOKEN=&lt;seu-token&gt;\n</code></pre>"},{"location":"ci/#para-push-token-se-necessario","title":"\ud83d\udd10 Para Push Token (Se necess\u00e1rio):","text":"<pre><code>ACTIONS_PUSH_TOKEN=&lt;token-com-permissoes&gt;\n</code></pre>"},{"location":"ci/#2-configurar-permissoes","title":"\u2699\ufe0f 2. Configurar Permiss\u00f5es","text":"<p>Certifique-se de que os workflows t\u00eam permiss\u00f5es adequadas:</p> <pre><code>permissions:\n  contents: write           # Para criar branches/commits\n  pull-requests: write      # Para criar/atualizar PRs\n</code></pre>"},{"location":"ci/#3-proteger-branches","title":"\ud83d\udee1\ufe0f 3. Proteger Branches","text":"<p>Configure prote\u00e7\u00e3o para <code>main</code> e <code>dev</code>:</p> <ul> <li>\u2705 Require status checks antes do merge</li> <li>\u2705 Require branches to be up to date</li> <li>\u2705 Require pull request reviews</li> </ul>"},{"location":"ci/#monitoramento-e-debug","title":"\ud83d\udd0d Monitoramento e Debug","text":""},{"location":"ci/#verificar-execucao","title":"\ud83d\udcca Verificar Execu\u00e7\u00e3o","text":"<ol> <li>Acesse: Repository \u2192 Actions</li> <li>Visualize: Workflows em execu\u00e7\u00e3o/conclu\u00eddos</li> <li>Debug: Clique no workflow para ver logs detalhados</li> </ol>"},{"location":"ci/#testar-localmente","title":"\ud83e\uddea Testar Localmente","text":""},{"location":"ci/#usando-act-opcional","title":"\ud83d\udc33 Usando Act (Opcional):","text":"<pre><code># Instalar act\nchoco install act  # Windows\nbrew install act   # macOS\n\n# Executar workflow localmente\nact -j test\n</code></pre>"},{"location":"ci/#limitacoes-do-act","title":"\u26a0\ufe0f Limita\u00e7\u00f5es do Act:","text":"<ul> <li>Nem todos os recursos funcionam</li> <li>Pode precisar de configura\u00e7\u00e3o adicional</li> </ul>"},{"location":"ci/#fluxo-de-trabalho-recomendado","title":"\ud83d\udd04 Fluxo de Trabalho Recomendado","text":""},{"location":"ci/#1-desenvolvimento","title":"\ud83d\udcdd 1. Desenvolvimento:","text":"<pre><code># Criar branch feature\ngit checkout -b feature/nova-funcionalidade\n\n# Fazer altera\u00e7\u00f5es e commit\ngit add .\ngit commit -m \"feat: adiciona nova funcionalidade\"\n\n# Push para origem\ngit push -u origin feature/nova-funcionalidade\n</code></pre>"},{"location":"ci/#2-automacao","title":"\ud83e\udd16 2. Automa\u00e7\u00e3o:","text":"<ul> <li>\u2705 Workflow executa testes automaticamente</li> <li>\ud83d\udd00 PR criado para <code>dev</code> automaticamente</li> <li>\ud83d\udce7 Notifica\u00e7\u00e3o enviada para revis\u00e3o</li> </ul>"},{"location":"ci/#3-revisao","title":"\ud83d\udc40 3. Revis\u00e3o:","text":"<ul> <li>\ud83d\udccb Revisar c\u00f3digo no PR</li> <li>\u2705 Aprovar se tudo estiver correto</li> <li>\ud83d\udd00 Merge para <code>dev</code></li> </ul>"},{"location":"ci/#4-deploy","title":"\ud83d\ude80 4. Deploy:","text":"<ul> <li>\ud83e\udd16 PR autom\u00e1tico <code>dev \u2192 main</code> criado</li> <li>\ud83d\udccb Revis\u00e3o final se necess\u00e1rio</li> <li>\ud83d\ude80 Deploy para produ\u00e7\u00e3o</li> </ul>"},{"location":"ci/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":""},{"location":"ci/#workflow-falha-em-setup-python","title":"\u274c Workflow falha em \"Setup Python\"","text":"<p>Solu\u00e7\u00e3o: Verificar vers\u00e3o Python no workflow <pre><code>- uses: actions/setup-python@v4\n  with:\n    python-version: '3.12.7'  # Vers\u00e3o espec\u00edfica\n</code></pre></p>"},{"location":"ci/#erro-de-permissao-para-criar-pr","title":"\u274c Erro de permiss\u00e3o para criar PR","text":"<p>Solu\u00e7\u00e3o: Verificar token e permiss\u00f5es <pre><code>permissions:\n  contents: write\n  pull-requests: write\n</code></pre></p>"},{"location":"ci/#codecov-upload-falha","title":"\u274c Codecov upload falha","text":"<p>Solu\u00e7\u00e3o: Verificar se token est\u00e1 configurado ou remover upload <pre><code>- name: Upload to Codecov\n  if: env.CODECOV_TOKEN  # S\u00f3 executa se token existe\n</code></pre></p>"},{"location":"ci/#testes-falham-apenas-no-ci","title":"\u274c Testes falham apenas no CI","text":"<p>Solu\u00e7\u00e3o: Verificar depend\u00eancias e ambiente <pre><code># Reproduzir ambiente do CI localmente\npoetry install\npoetry run pytest --cov=src\n</code></pre></p>"},{"location":"ci/#metricas-e-relatorios","title":"\ud83d\udcc8 M\u00e9tricas e Relat\u00f3rios","text":""},{"location":"ci/#cobertura-de-codigo","title":"\ud83d\udcca Cobertura de C\u00f3digo","text":"<ul> <li>Codecov: Relat\u00f3rios online de cobertura</li> <li>Badge: Adicionar badge no README</li> <li>Hist\u00f3rico: Acompanhar evolu\u00e7\u00e3o da cobertura</li> </ul>"},{"location":"ci/#performance-dos-testes","title":"\u23f1\ufe0f Performance dos Testes","text":"<ul> <li>Tempo de execu\u00e7\u00e3o: Monitorar dura\u00e7\u00e3o dos workflows</li> <li>Otimiza\u00e7\u00e3o: Cache de depend\u00eancias quando poss\u00edvel</li> </ul>"},{"location":"ci/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83e\uddea Execute os Testes: \ud83e\uddea Tests</li> <li>\ud83d\udc0d Configure Python: \ud83d\udc0d Pyenv</li> <li>\ud83d\udd27 Configure Hooks: \ud83d\udd0d Pre-commit</li> <li>\ud83d\udcc2 Configure Git: \ud83d\udcc2 Git</li> </ul>"},{"location":"codigo/","title":"Documenta\u00e7\u00e3o do C\u00f3digo - Pipeline ETL","text":"<p>Esta se\u00e7\u00e3o cont\u00e9m a documenta\u00e7\u00e3o detalhada de todos os m\u00f3dulos Python do projeto.</p>"},{"location":"codigo/#arquitetura-do-pipeline","title":"Arquitetura do Pipeline","text":"<p>O projeto segue uma arquitetura ETL (Extract, Transform, Load) simples e eficiente:</p> <pre><code>graph LR\n    A[Arquivos Excel] --&gt; B[Extract]\n    B --&gt; C[Transform]\n    C --&gt; D[Load]\n    D --&gt; E[Arquivo Consolidado]</code></pre>"},{"location":"codigo/#estrutura-dos-modulos","title":"Estrutura dos M\u00f3dulos","text":""},{"location":"codigo/#src","title":"\ud83d\udcc1 src/","text":"<ul> <li><code>main.py</code>: Ponto de entrada do pipeline que orquestra todo o processo</li> <li><code>pipeline/</code>: Pacote contendo os m\u00f3dulos do pipeline ETL</li> </ul>"},{"location":"codigo/#srcpipeline","title":"\ud83d\udcc1 src/pipeline/","text":"<ul> <li><code>extract.py</code>: M\u00f3dulo de extra\u00e7\u00e3o de dados</li> <li><code>transform.py</code>: M\u00f3dulo de transforma\u00e7\u00e3o de dados</li> <li><code>load.py</code>: M\u00f3dulo de carregamento de dados</li> </ul>"},{"location":"codigo/#fluxo-de-execucao","title":"Fluxo de Execu\u00e7\u00e3o","text":"<ol> <li>Extra\u00e7\u00e3o: O m\u00f3dulo <code>extract</code> l\u00ea todos os arquivos <code>.xlsx</code> do diret\u00f3rio <code>data/input/</code></li> <li>Transforma\u00e7\u00e3o: O m\u00f3dulo <code>transform</code> concatena todos os DataFrames em um \u00fanico</li> <li>Carregamento: O m\u00f3dulo <code>load</code> salva o resultado final em <code>data/output/</code></li> </ol>"},{"location":"codigo/#navegacao","title":"Navega\u00e7\u00e3o","text":"<p>Use o menu lateral para acessar a documenta\u00e7\u00e3o detalhada de cada m\u00f3dulo:</p> <ul> <li>Main - M\u00f3dulo principal</li> <li>Extract - Extra\u00e7\u00e3o de dados</li> <li>Transform - Transforma\u00e7\u00e3o de dados</li> <li>Load - Carregamento de dados</li> </ul>"},{"location":"extract/","title":"\ud83d\udce5 Extract \u2014 M\u00f3dulo de Extra\u00e7\u00e3o","text":"<p>Este m\u00f3dulo \u00e9 respons\u00e1vel pela extra\u00e7\u00e3o de dados de arquivos Excel no pipeline ETL.</p>"},{"location":"extract/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>O m\u00f3dulo <code>extract.py</code> \u00e9 o primeiro est\u00e1gio do pipeline ETL, respons\u00e1vel por:</p> <ul> <li>\ud83d\udcc1 Localizar arquivos Excel (<code>.xlsx</code>) em diret\u00f3rios</li> <li>\ud83d\udcca Ler dados usando pandas</li> <li>\ud83d\udccb Converter cada arquivo em DataFrame</li> <li>\ud83d\udce4 Retornar lista de DataFrames para processamento</li> </ul>"},{"location":"extract/#funcionalidades","title":"\ud83d\udd27 Funcionalidades","text":""},{"location":"extract/#capacidades","title":"\u2705 Capacidades:","text":"<ul> <li>\ud83d\udd0d Busca autom\u00e1tica de arquivos <code>.xlsx</code></li> <li>\ud83d\udcca Leitura com pandas (engine openpyxl)</li> <li>\ud83d\udd04 Processamento de m\u00faltiplos arquivos</li> <li>\ud83d\udccb Retorno estruturado em lista</li> </ul>"},{"location":"extract/#performance","title":"\u26a1 Performance:","text":"<ul> <li>\ud83d\ude80 Processamento eficiente com pandas</li> <li>\ud83d\udcbe Carregamento sob demanda</li> <li>\ud83d\udd04 Suporte a arquivos grandes</li> </ul>"},{"location":"extract/#documentacao-da-api","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o da API","text":""},{"location":"extract/#funcao-principal","title":"\ud83c\udfaf Fun\u00e7\u00e3o Principal","text":"<p>Read all .xlsx files from input_path and return a list of DataFrames.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str</code> <p>path to the directory containing .xlsx files</p> required <p>Returns:</p> Type Description <code>List[DataFrame]</code> <p>list of pandas.DataFrame objects</p> Source code in <code>src/pipeline/extract.py</code> <pre><code>def extract_from_excel(input_path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"Read all .xlsx files from input_path and return a list of DataFrames.\n\n    Args:\n        input_path: path to the directory containing .xlsx files\n\n    Returns:\n        list of pandas.DataFrame objects\n    \"\"\"\n\n    pattern = os.path.join(input_path, \"*.xlsx\")\n    all_files = glob.glob(pattern)\n\n    data_list: List[pd.DataFrame] = []\n    for file_path in all_files:\n        df = pd.read_excel(file_path)\n        data_list.append(df)\n\n    return data_list\n</code></pre>"},{"location":"extract/#exemplos-de-uso","title":"\ud83d\udcbb Exemplos de Uso","text":""},{"location":"extract/#uso-basico","title":"\ud83d\udcc1 Uso B\u00e1sico","text":"<pre><code>from pipeline.extract import extract_from_excel\n\n# Extrair dados de arquivos Excel\ndata_list = extract_from_excel(\"data/input\")\nprint(f\"Arquivos processados: {len(data_list)}\")\n\n# Verificar shapes dos DataFrames\nfor i, df in enumerate(data_list):\n    print(f\"Arquivo {i+1}: {df.shape}\")\n</code></pre>"},{"location":"extract/#verificacao-de-dados","title":"\ud83d\udd0d Verifica\u00e7\u00e3o de Dados","text":"<pre><code># Verificar se h\u00e1 dados\nif data_list:\n    print(\"\u2705 Dados extra\u00eddos com sucesso!\")\n    for df in data_list:\n        print(f\"Colunas: {list(df.columns)}\")\n        print(f\"Linhas: {len(df)}\")\nelse:\n    print(\"\u274c Nenhum arquivo encontrado\")\n</code></pre>"},{"location":"extract/#analise-exploratoria","title":"\ud83e\uddea An\u00e1lise Explorat\u00f3ria","text":"<pre><code># Inspecionar dados extra\u00eddos\nfor i, df in enumerate(data_list):\n    print(f\"\\n\ud83d\udcca Arquivo {i+1}:\")\n    print(f\"\ud83d\udccb Shape: {df.shape}\")\n    print(f\"\ud83c\udff7\ufe0f Colunas: {list(df.columns)}\")\n    print(f\"\ud83d\udcc8 Info:\")\n    df.info()\n    print(f\"\ud83d\udd0d Preview:\")\n    print(df.head())\n</code></pre>"},{"location":"extract/#fluxo-de-execucao","title":"\ud83d\udd04 Fluxo de Execu\u00e7\u00e3o","text":"<pre><code>graph LR\n    A[\ud83d\udcc1 Diret\u00f3rio Input] --&gt; B[\ud83d\udd0d Buscar *.xlsx]\n    B --&gt; C[\ud83d\udcca Ler com Pandas]\n    C --&gt; D[\ud83d\udccb Criar DataFrame]\n    D --&gt; E[\u2795 Adicionar \u00e0 Lista]\n    E --&gt; F{\ud83d\udd04 Mais Arquivos?}\n    F --&gt;|\u2705 Sim| B\n    F --&gt;|\u274c N\u00e3o| G[\ud83d\udce4 Retornar Lista]\n\n    style A fill:#e3f2fd\n    style C fill:#f3e5f5\n    style G fill:#e8f5e8</code></pre>"},{"location":"extract/#comportamento-detalhado","title":"\u2699\ufe0f Comportamento Detalhado","text":""},{"location":"extract/#busca-de-arquivos","title":"\ud83d\udcc1 Busca de Arquivos","text":"<ul> <li>Padr\u00e3o: <code>*.xlsx</code> no diret\u00f3rio especificado</li> <li>M\u00e9todo: <code>glob.glob()</code> para busca eficiente</li> <li>Recursivo: N\u00e3o (apenas diret\u00f3rio especificado)</li> </ul>"},{"location":"extract/#leitura-de-dados","title":"\ud83d\udcca Leitura de Dados","text":"<ul> <li>Engine: <code>openpyxl</code> (para arquivos .xlsx)</li> <li>Encoding: Autom\u00e1tico (pandas detecta)</li> <li>Headers: Primeira linha como cabe\u00e7alho (padr\u00e3o)</li> </ul>"},{"location":"extract/#processamento","title":"\ud83d\udd04 Processamento","text":"<ul> <li>Sequencial: Um arquivo por vez</li> <li>Acumula\u00e7\u00e3o: Lista de DataFrames</li> <li>Mem\u00f3ria: Todos os DataFrames mantidos em mem\u00f3ria</li> </ul>"},{"location":"extract/#tratamento-de-erros","title":"\ud83d\udee0\ufe0f Tratamento de Erros","text":""},{"location":"extract/#cenarios-de-erro-comuns","title":"\u274c Cen\u00e1rios de Erro Comuns","text":""},{"location":"extract/#diretorio-nao-encontrado","title":"\ud83d\udcc1 Diret\u00f3rio n\u00e3o encontrado","text":"<pre><code>import os\nif not os.path.exists(input_path):\n    print(f\"\u274c Diret\u00f3rio n\u00e3o encontrado: {input_path}\")\n</code></pre>"},{"location":"extract/#arquivo-corrompido","title":"\ud83d\udcc4 Arquivo corrompido","text":"<pre><code>try:\n    data_list = extract_from_excel(\"data/input\")\nexcept Exception as e:\n    print(f\"\u274c Erro na leitura: {e}\")\n</code></pre>"},{"location":"extract/#arquivo-em-uso","title":"\ud83d\udd12 Arquivo em uso","text":"<ul> <li>Problema: Arquivo aberto no Excel</li> <li>Solu\u00e7\u00e3o: Fechar Excel e tentar novamente</li> </ul>"},{"location":"extract/#melhorias-possiveis","title":"\ud83d\ude80 Melhorias Poss\u00edveis","text":""},{"location":"extract/#robustez","title":"\ud83d\udd27 Robustez","text":"<pre><code># Tratamento de erros por arquivo\ndef extract_with_error_handling(input_path: str):\n    valid_files = []\n    errors = []\n\n    for file_path in glob.glob(os.path.join(input_path, \"*.xlsx\")):\n        try:\n            df = pd.read_excel(file_path)\n            valid_files.append(df)\n        except Exception as e:\n            errors.append((file_path, str(e)))\n\n    return valid_files, errors\n</code></pre>"},{"location":"extract/#performance_1","title":"\u26a1 Performance","text":"<pre><code># Leitura paralela (para muitos arquivos)\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef extract_parallel(input_path: str):\n    files = glob.glob(os.path.join(input_path, \"*.xlsx\"))\n\n    with ThreadPoolExecutor() as executor:\n        dataframes = list(executor.map(pd.read_excel, files))\n\n    return dataframes\n</code></pre>"},{"location":"extract/#validacao","title":"\ud83d\udd0d Valida\u00e7\u00e3o","text":"<pre><code># Valida\u00e7\u00e3o de schema\ndef validate_schema(df: pd.DataFrame, required_columns: list):\n    missing_columns = set(required_columns) - set(df.columns)\n    if missing_columns:\n        raise ValueError(f\"Colunas faltando: {missing_columns}\")\n</code></pre>"},{"location":"extract/#formatos-suportados","title":"\ud83d\udcca Formatos Suportados","text":""},{"location":"extract/#suportados","title":"\u2705 Suportados","text":"<ul> <li>Excel (.xlsx): Formato principal</li> <li>Excel (.xls): Com adapta\u00e7\u00e3o do c\u00f3digo</li> </ul>"},{"location":"extract/#extensoes-possiveis","title":"\ud83d\udd04 Extens\u00f5es Poss\u00edveis","text":"<ul> <li>CSV: Adaptar para <code>pd.read_csv()</code></li> <li>Parquet: Adaptar para <code>pd.read_parquet()</code></li> <li>JSON: Adaptar para <code>pd.read_json()</code></li> </ul>"},{"location":"extract/#testes","title":"\ud83e\uddea Testes","text":""},{"location":"extract/#testes-incluidos","title":"\ud83d\udccb Testes Inclu\u00eddos","text":"<ul> <li>\u2705 Leitura de arquivos v\u00e1lidos</li> <li>\u2705 Tratamento de diret\u00f3rio vazio</li> <li>\u2705 Valida\u00e7\u00e3o do formato de retorno</li> <li>\u2705 Comportamento com m\u00faltiplos arquivos</li> </ul>"},{"location":"extract/#executar-testes","title":"\ud83d\udd27 Executar Testes","text":"<pre><code># Testes espec\u00edficos do m\u00f3dulo extract\npoetry run pytest tests/test_extract.py -v\n\n# Com cobertura\npoetry run pytest tests/test_extract.py --cov=src.pipeline.extract\n</code></pre>"},{"location":"extract/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83d\udd04 Transform: \u2699\ufe0f Transform - Pr\u00f3ximo est\u00e1gio do pipeline</li> <li>\ud83d\udce4 Load: \ud83d\udce4 Load - Est\u00e1gio final</li> <li>\ud83c\udfaf Main: \ud83c\udfaf Main - Orquestra\u00e7\u00e3o completa</li> <li>\ud83d\udcd6 Overview: \ud83d\udcd6 C\u00f3digo - Vis\u00e3o geral da arquitetura</li> </ul>"},{"location":"git/","title":"\ud83d\udcc2 Git e GitHub \u2014 Controle de Vers\u00e3o","text":"<p>Esta p\u00e1gina explica os conceitos fundamentais do Git e GitHub, como configurar o projeto e trabalhar com versionamento e colabora\u00e7\u00e3o.</p>"},{"location":"git/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":""},{"location":"git/#git-vs-github","title":"\ud83d\udd04 Git vs GitHub:","text":"<ul> <li>Git: Sistema de controle de vers\u00e3o distribu\u00eddo</li> <li>GitHub: Plataforma para hospedar reposit\u00f3rios Git na nuvem</li> <li>Benef\u00edcios: Hist\u00f3rico, colabora\u00e7\u00e3o, backup, CI/CD</li> </ul>"},{"location":"git/#estrutura-de-arquivos-git","title":"\ud83d\udcc1 Estrutura de Arquivos Git","text":""},{"location":"git/#git-repositorio-local","title":"\ud83d\udd12 <code>.git/</code> \u2014 Reposit\u00f3rio Local","text":"<ul> <li>Localiza\u00e7\u00e3o: Pasta oculta na raiz do projeto</li> <li>Conte\u00fado: Hist\u00f3rico, branches, configura\u00e7\u00f5es</li> <li>Cria\u00e7\u00e3o: Autom\u00e1tica com <code>git init</code> ou <code>git clone</code></li> </ul> <pre><code># Inicializar reposit\u00f3rio\ngit init\n\n# Verificar pasta (Windows)\nGet-ChildItem -Force | Where-Object {$_.Name -eq \".git\"}\n</code></pre>"},{"location":"git/#github-configuracoes-do-github","title":"\u2699\ufe0f <code>.github/</code> \u2014 Configura\u00e7\u00f5es do GitHub","text":"<pre><code>.github/\n\u251c\u2500\u2500 workflows/              # \ud83d\ude80 GitHub Actions (CI/CD)\n\u2502   \u251c\u2500\u2500 ci.yml\n\u2502   \u251c\u2500\u2500 push-create-pr.yml\n\u2502   \u2514\u2500\u2500 create-pr-dev-to-main.yml\n\u251c\u2500\u2500 PULL_REQUEST_TEMPLATE.md # \ud83d\udcdd Template para PRs\n\u251c\u2500\u2500 ISSUE_TEMPLATE/          # \ud83d\udc1b Templates para issues\n\u2514\u2500\u2500 CODEOWNERS              # \ud83d\udc65 Respons\u00e1veis por c\u00f3digo\n</code></pre>"},{"location":"git/#gitignore-arquivos-ignorados","title":"\ud83d\udeab <code>.gitignore</code> \u2014 Arquivos Ignorados","text":"<p>Especifica quais arquivos N\u00c3O versionar:</p> <pre><code># Ambientes virtuais\n.venv/\n.env\n\n# Cache Python\n__pycache__/\n*.pyc\n*.pyo\n\n# Documenta\u00e7\u00e3o gerada\nsite/\n\n# IDEs\n.vscode/\n.idea/\n\n# Tempor\u00e1rios\n*.tmp\n*.log\n</code></pre>"},{"location":"git/#gitattributes-atributos-de-arquivo","title":"\ud83d\udd27 <code>.gitattributes</code> \u2014 Atributos de Arquivo","text":"<p>Controla como Git trata diferentes tipos de arquivo:</p> <pre><code># Fins de linha\n*.py text eol=lf\n*.md text eol=lf\n*.yml text eol=lf\n*.ps1 text eol=crlf\n\n# Bin\u00e1rios\n*.png binary\n*.jpg binary\n*.xlsx binary\n</code></pre>"},{"location":"git/#configuracao-inicial","title":"\ud83d\ude80 Configura\u00e7\u00e3o Inicial","text":""},{"location":"git/#1-configurar-usuario","title":"\ud83d\udc64 1. Configurar Usu\u00e1rio","text":"<pre><code># Configura\u00e7\u00e3o global\ngit config --global user.name \"Seu Nome\"\ngit config --global user.email \"seu.email@example.com\"\n\n# Verificar configura\u00e7\u00e3o\ngit config --list\n</code></pre>"},{"location":"git/#2-inicializar-projeto","title":"\ud83d\udcc1 2. Inicializar Projeto","text":""},{"location":"git/#projeto-novo","title":"\ud83c\udd95 Projeto Novo:","text":"<pre><code># Inicializar reposit\u00f3rio\ngit init\n\n# Adicionar arquivos\ngit add .\ngit commit -m \"Initial commit\"\n\n# Conectar ao GitHub\ngit remote add origin https://github.com/usuario/repo.git\ngit push -u origin main\n</code></pre>"},{"location":"git/#projeto-existente","title":"\ud83d\udce5 Projeto Existente:","text":"<pre><code># Clonar reposit\u00f3rio\ngit clone https://github.com/usuario/repo.git\ncd repo\n\n# Configurar ambiente\npoetry install\n</code></pre>"},{"location":"git/#workflow-com-branches","title":"\ud83c\udf3f Workflow com Branches","text":""},{"location":"git/#estrutura-de-branches","title":"\ud83d\udcca Estrutura de Branches","text":"<pre><code>graph LR\n    A[\ud83d\udc64 feature/nova-func] --&gt; B[\ud83d\udd27 dev]\n    B --&gt; C[\ud83d\ude80 main]\n\n    D[\ud83d\udc64 feature/bug-fix] --&gt; B\n    E[\ud83d\udc64 feature/docs] --&gt; B\n\n    style C fill:#e8f5e8\n    style B fill:#fff3e0\n    style A fill:#e3f2fd</code></pre>"},{"location":"git/#fluxo-de-desenvolvimento","title":"\ud83d\udd04 Fluxo de Desenvolvimento","text":""},{"location":"git/#1-criar-feature-branch","title":"1\ufe0f\u20e3 Criar Feature Branch","text":"<pre><code># Atualizar main\ngit checkout main\ngit pull origin main\n\n# Criar nova branch\ngit checkout -b feature/nova-funcionalidade\n\n# Trabalhar e commitar\ngit add .\ngit commit -m \"feat: adiciona nova funcionalidade\"\n\n# Enviar para GitHub\ngit push -u origin feature/nova-funcionalidade\n</code></pre>"},{"location":"git/#2-criar-pull-request","title":"2\ufe0f\u20e3 Criar Pull Request","text":"<pre><code># Via GitHub CLI (se instalado)\ngh pr create --base dev --head feature/nova-funcionalidade \\\n  --title \"feat: Nova funcionalidade\" \\\n  --body \"Descri\u00e7\u00e3o detalhada\"\n\n# Ou via interface web do GitHub\n</code></pre>"},{"location":"git/#3-atualizar-branch","title":"3\ufe0f\u20e3 Atualizar Branch","text":"<pre><code># Se main foi atualizada\ngit checkout main\ngit pull origin main\ngit checkout feature/nova-funcionalidade\ngit merge main\n\n# Resolver conflitos se houver\ngit add .\ngit commit -m \"merge: resolve conflicts with main\"\ngit push\n</code></pre>"},{"location":"git/#github-actions-cicd","title":"\ud83e\udd16 GitHub Actions (CI/CD)","text":""},{"location":"git/#workflows-configurados","title":"\ud83d\udd27 Workflows Configurados","text":""},{"location":"git/#ciyml-pipeline-principal","title":"\ud83e\uddea <code>ci.yml</code> \u2014 Pipeline Principal","text":"<pre><code>name: CI\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.12'\n      - name: Install dependencies\n        run: |\n          pip install poetry\n          poetry install\n      - name: Run tests\n        run: poetry run pytest\n</code></pre>"},{"location":"git/#push-create-pryml-prs-automaticos","title":"\ud83d\udd00 <code>push-create-pr.yml</code> \u2014 PRs Autom\u00e1ticos","text":"<ul> <li>Trigger: Push em <code>feature/**</code>, <code>test/**</code></li> <li>A\u00e7\u00e3o: Cria PR automaticamente para <code>dev</code></li> </ul>"},{"location":"git/#create-pr-dev-to-mainyml-deploy","title":"\ud83d\ude80 <code>create-pr-dev-to-main.yml</code> \u2014 Deploy","text":"<ul> <li>Trigger: Merge em <code>dev</code></li> <li>A\u00e7\u00e3o: Cria PR <code>dev \u2192 main</code></li> </ul>"},{"location":"git/#tokens-e-secrets","title":"\ud83d\udd10 Tokens e Secrets","text":""},{"location":"git/#personal-access-token-pat","title":"\ud83d\udd11 Personal Access Token (PAT)","text":""},{"location":"git/#criar-token","title":"\ud83d\udcdd Criar Token:","text":"<ol> <li>GitHub \u2192 Settings \u2192 Developer settings</li> <li>Personal access tokens \u2192 Tokens (classic)</li> <li>Generate new token \u2192 Selecionar escopos:</li> <li><code>repo</code> (reposit\u00f3rios privados)</li> <li><code>workflow</code> (GitHub Actions)</li> <li><code>write:packages</code> (publicar pacotes)</li> </ol>"},{"location":"git/#configurar-secret","title":"\u2699\ufe0f Configurar Secret:","text":"<ol> <li>Reposit\u00f3rio \u2192 Settings \u2192 Secrets and variables \u2192 Actions</li> <li>New repository secret</li> <li>Nome: <code>GITHUB_TOKEN_CUSTOM</code></li> <li>Valor: Colar o token</li> </ol>"},{"location":"git/#usar-no-workflow","title":"\ud83d\udd27 Usar no Workflow:","text":"<pre><code>- name: Checkout with token\n  uses: actions/checkout@v4\n  with:\n    token: ${{ secrets.GITHUB_TOKEN_CUSTOM }}\n</code></pre>"},{"location":"git/#comandos-essenciais","title":"\ud83d\udccb Comandos Essenciais","text":""},{"location":"git/#status-e-informacoes","title":"\ud83d\udd0d Status e Informa\u00e7\u00f5es","text":"<pre><code>git status              # Status dos arquivos\ngit log --oneline       # Hist\u00f3rico resumido\ngit branch -a           # Listar todas as branches\ngit remote -v           # Listar remotes\n</code></pre>"},{"location":"git/#trabalhando-com-arquivos","title":"\ud83d\udcc1 Trabalhando com Arquivos","text":"<pre><code>git add .               # Adicionar todos os arquivos\ngit add arquivo.py      # Adicionar arquivo espec\u00edfico\ngit commit -m \"msg\"     # Commitar com mensagem\ngit commit --amend      # Alterar \u00faltimo commit\n</code></pre>"},{"location":"git/#branches","title":"\ud83c\udf3f Branches","text":"<pre><code>git branch nome         # Criar branch\ngit checkout nome       # Trocar para branch\ngit checkout -b nome    # Criar e trocar\ngit merge origem        # Merge de outra branch\ngit branch -d nome      # Deletar branch local\n</code></pre>"},{"location":"git/#sincronizacao","title":"\ud83d\udd04 Sincroniza\u00e7\u00e3o","text":"<pre><code>git fetch              # Buscar atualiza\u00e7\u00f5es\ngit pull               # Fetch + merge\ngit push               # Enviar commits\ngit push -u origin branch  # Primeira vez\n</code></pre>"},{"location":"git/#desfazer-alteracoes","title":"\ud83d\udd04 Desfazer Altera\u00e7\u00f5es","text":"<pre><code>git restore arquivo    # Descartar altera\u00e7\u00f5es\ngit reset HEAD~1       # Desfazer \u00faltimo commit\ngit revert &lt;commit&gt;    # Reverter commit espec\u00edfico\n</code></pre>"},{"location":"git/#solucao-de-problemas","title":"\ud83d\udee0\ufe0f Solu\u00e7\u00e3o de Problemas","text":""},{"location":"git/#erro-de-autenticacao","title":"\u274c Erro de Autentica\u00e7\u00e3o","text":"<pre><code># Verificar remote\ngit remote -v\n\n# Reconfigurar com token\ngit remote set-url origin https://&lt;token&gt;@github.com/user/repo.git\n\n# Ou configurar credential helper\ngit config --global credential.helper manager-core\n</code></pre>"},{"location":"git/#conflitos-de-merge","title":"\u274c Conflitos de Merge","text":"<pre><code># Durante merge com conflitos\ngit status              # Ver arquivos em conflito\n# Editar arquivos manualmente\ngit add .               # Marcar como resolvido\ngit commit -m \"resolve conflicts\"\n</code></pre>"},{"location":"git/#branch-desatualizada","title":"\u274c Branch desatualizada","text":"<pre><code># Atualizar branch com main\ngit checkout main\ngit pull origin main\ngit checkout sua-branch\ngit rebase main         # Ou git merge main\n</code></pre>"},{"location":"git/#commit-acidental","title":"\u274c Commit acidental","text":"<pre><code># Desfazer \u00faltimo commit (mantendo altera\u00e7\u00f5es)\ngit reset --soft HEAD~1\n\n# Desfazer \u00faltimo commit (perdendo altera\u00e7\u00f5es)\ngit reset --hard HEAD~1\n</code></pre>"},{"location":"git/#boas-praticas","title":"\ud83d\udcda Boas Pr\u00e1ticas","text":""},{"location":"git/#mensagens-de-commit","title":"\ud83d\udcdd Mensagens de Commit","text":"<pre><code># Formato: tipo(escopo): descri\u00e7\u00e3o\ngit commit -m \"feat(api): adiciona endpoint de usu\u00e1rios\"\ngit commit -m \"fix(tests): corrige teste de valida\u00e7\u00e3o\"\ngit commit -m \"docs(readme): atualiza instru\u00e7\u00f5es de setup\"\n\n# Tipos comuns:\n# feat: nova funcionalidade\n# fix: corre\u00e7\u00e3o de bug\n# docs: documenta\u00e7\u00e3o\n# style: formata\u00e7\u00e3o\n# refactor: refatora\u00e7\u00e3o\n# test: testes\n# chore: tarefas de manuten\u00e7\u00e3o\n</code></pre>"},{"location":"git/#estrategia-de-branches","title":"\ud83c\udf3f Estrat\u00e9gia de Branches","text":"<ul> <li><code>main</code>: C\u00f3digo de produ\u00e7\u00e3o</li> <li><code>dev</code>: Integra\u00e7\u00e3o de features</li> <li><code>feature/*</code>: Desenvolvimento de funcionalidades</li> <li><code>hotfix/*</code>: Corre\u00e7\u00f5es urgentes</li> </ul>"},{"location":"git/#pull-requests","title":"\ud83d\udd04 Pull Requests","text":"<ul> <li>\u2705 T\u00edtulo claro e descritivo</li> <li>\u2705 Descri\u00e7\u00e3o detalhada do que foi alterado</li> <li>\u2705 Testes executando com sucesso</li> <li>\u2705 Revis\u00e3o por pelo menos uma pessoa</li> <li>\u2705 Branch atualizada com main/dev</li> </ul>"},{"location":"git/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83d\udd0d Configure Hooks: \ud83d\udd0d Pre-commit</li> <li>\ud83d\ude80 Configure CI: \ud83d\ude80 CI</li> <li>\ud83e\uddea Execute Testes: \ud83e\uddea Tests</li> <li>\ud83d\udccb Execute Pipeline: \ud83d\udccb Pipeline</li> </ul>"},{"location":"load/","title":"\ud83d\udce4 Load \u2014 M\u00f3dulo de Carregamento","text":"<p>Este m\u00f3dulo \u00e9 respons\u00e1vel pelo carregamento e persist\u00eancia dos dados transformados no pipeline ETL.</p>"},{"location":"load/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>O m\u00f3dulo <code>load.py</code> \u00e9 o terceiro e \u00faltimo est\u00e1gio do pipeline ETL, respons\u00e1vel por:</p> <ul> <li>\ud83d\udcbe Salvar DataFrames em arquivos Excel</li> <li>\ud83d\udcc1 Criar diret\u00f3rios de sa\u00edda automaticamente</li> <li>\u2705 Confirmar sucesso da opera\u00e7\u00e3o</li> <li>\ud83d\udd27 Configurar formato de sa\u00edda</li> </ul>"},{"location":"load/#funcionalidades","title":"\ud83d\udd27 Funcionalidades","text":""},{"location":"load/#capacidades","title":"\u2705 Capacidades:","text":"<ul> <li>\ud83d\udcca Salvamento em formato Excel (.xlsx)</li> <li>\ud83d\udcc1 Cria\u00e7\u00e3o autom\u00e1tica de diret\u00f3rios</li> <li>\ud83c\udff7\ufe0f Nomea\u00e7\u00e3o personalizada de arquivos</li> <li>\u2705 Confirma\u00e7\u00e3o de sucesso</li> </ul>"},{"location":"load/#performance","title":"\u26a1 Performance:","text":"<ul> <li>\ud83d\ude80 Escrita otimizada com openpyxl</li> <li>\ud83d\udcc1 Opera\u00e7\u00f5es eficientes de sistema de arquivos</li> <li>\ud83d\udcbe Controle de mem\u00f3ria durante salvamento</li> </ul>"},{"location":"load/#documentacao-da-api","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o da API","text":""},{"location":"load/#funcao-principal","title":"\ud83c\udfaf Fun\u00e7\u00e3o Principal","text":"<p>Save DataFrame to an xlsx file.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame to save</p> required <code>output_path</code> <code>str</code> <p>directory to save the file</p> required <code>filename</code> <code>str</code> <p>filename without extension</p> required <p>Returns:</p> Type Description <code>str</code> <p>success message string</p> Source code in <code>src/pipeline/load.py</code> <pre><code>def load_to_excel(df: pd.DataFrame, output_path: str, filename: str) -&gt; str:\n    \"\"\"Save DataFrame to an xlsx file.\n\n    Args:\n        df: DataFrame to save\n        output_path: directory to save the file\n        filename: filename without extension\n\n    Returns:\n        success message string\n    \"\"\"\n\n    os.makedirs(output_path, exist_ok=True)\n\n    out_path = os.path.join(output_path, f\"{filename}.xlsx\")\n    df.to_excel(out_path, index=False)\n    return \"arquivo xlsx salvo com sucesso\"\n</code></pre>"},{"location":"load/#exemplos-de-uso","title":"\ud83d\udcbb Exemplos de Uso","text":""},{"location":"load/#uso-basico","title":"\ud83d\udcbe Uso B\u00e1sico","text":"<pre><code>from pipeline.load import load_to_excel\nimport pandas as pd\n\n# Criar DataFrame de exemplo\ndf = pd.DataFrame({\n    \"nome\": [\"Ana\", \"Bruno\", \"Carlos\"],\n    \"idade\": [25, 30, 35],\n    \"cidade\": [\"SP\", \"RJ\", \"BH\"]\n})\n\n# Salvar em Excel\nmensagem = load_to_excel(\n    df=df,\n    output_path=\"data/output\",\n    filename=\"dados_processados\"\n)\nprint(mensagem)  # \"arquivo xlsx salvo com sucesso\"\n</code></pre>"},{"location":"load/#criacao-de-diretorios","title":"\ud83d\udcc1 Cria\u00e7\u00e3o de Diret\u00f3rios","text":"<pre><code># Diret\u00f3rio ser\u00e1 criado automaticamente\nmensagem = load_to_excel(\n    df=df,\n    output_path=\"data/novapasta/subpasta\",\n    filename=\"relatorio\"\n)\n# Cria toda a estrutura: data/novapasta/subpasta/\n</code></pre>"},{"location":"load/#nomes-de-arquivo-personalizados","title":"\ud83c\udff7\ufe0f Nomes de Arquivo Personalizados","text":"<pre><code>from datetime import datetime\n\n# Nome com timestamp\ntimestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\nfilename = f\"dados_{timestamp}\"\n\nmensagem = load_to_excel(df, \"data/output\", filename)\n# Salva como: dados_20241016_143022.xlsx\n</code></pre>"},{"location":"load/#fluxo-de-execucao","title":"\ud83d\udd04 Fluxo de Execu\u00e7\u00e3o","text":"<pre><code>graph LR\n    A[\ud83d\udcca DataFrame] --&gt; B[\ud83d\udcc1 Verificar Diret\u00f3rio]\n    B --&gt; C{\ud83d\udd0d Existe?}\n    C --&gt;|\u274c N\u00e3o| D[\ud83d\udcc1 Criar Diret\u00f3rio]\n    C --&gt;|\u2705 Sim| E[\ud83d\udcdd Construir Caminho]\n    D --&gt; E\n    E --&gt; F[\ud83d\udcbe df.to_excel()]\n    F --&gt; G[\u2705 Retornar Sucesso]\n\n    style A fill:#e3f2fd\n    style D fill:#f3e5f5\n    style F fill:#fff3e0\n    style G fill:#e8f5e8</code></pre>"},{"location":"load/#comportamento-detalhado","title":"\u2699\ufe0f Comportamento Detalhado","text":""},{"location":"load/#gerenciamento-de-diretorios","title":"\ud83d\udcc1 Gerenciamento de Diret\u00f3rios","text":"<ul> <li>M\u00e9todo: <code>os.makedirs(output_path, exist_ok=True)</code></li> <li>Recursivo: Cria toda a estrutura necess\u00e1ria</li> <li>Seguro: <code>exist_ok=True</code> evita erro se j\u00e1 existir</li> </ul>"},{"location":"load/#salvamento","title":"\ud83d\udcbe Salvamento","text":"<ul> <li>Engine: <code>openpyxl</code> (padr\u00e3o para .xlsx)</li> <li>\u00cdndices: <code>index=False</code> (n\u00e3o salva \u00edndices do DataFrame)</li> <li>Formato: Excel nativo (.xlsx)</li> <li>Codifica\u00e7\u00e3o: UTF-8 (padr\u00e3o do pandas)</li> </ul>"},{"location":"load/#configuracoes","title":"\ud83d\udd27 Configura\u00e7\u00f5es","text":"<ul> <li>Extens\u00e3o: Adicionada automaticamente (.xlsx)</li> <li>Sobrescrita: Arquivos existentes s\u00e3o substitu\u00eddos</li> <li>Permiss\u00f5es: Dependem do sistema operacional</li> </ul>"},{"location":"load/#tratamento-de-erros","title":"\ud83d\udee0\ufe0f Tratamento de Erros","text":""},{"location":"load/#cenarios-de-erro-comuns","title":"\u274c Cen\u00e1rios de Erro Comuns","text":""},{"location":"load/#arquivo-em-uso-windows","title":"\ud83d\udd12 Arquivo em uso (Windows)","text":"<pre><code># Problema: arquivo aberto no Excel\ntry:\n    mensagem = load_to_excel(df, \"data/output\", \"planilha\")\nexcept PermissionError:\n    print(\"\u274c Feche o arquivo no Excel e tente novamente\")\n</code></pre>"},{"location":"load/#permissoes-de-diretorio","title":"\ud83d\udcc1 Permiss\u00f5es de diret\u00f3rio","text":"<pre><code>try:\n    mensagem = load_to_excel(df, \"/sistema/protegido\", \"arquivo\")\nexcept PermissionError:\n    print(\"\u274c Sem permiss\u00e3o para escrever no diret\u00f3rio\")\n</code></pre>"},{"location":"load/#espaco-em-disco","title":"\ud83d\udcbe Espa\u00e7o em disco","text":"<pre><code>try:\n    mensagem = load_to_excel(df, \"data/output\", \"arquivo_grande\")\nexcept OSError as e:\n    print(f\"\u274c Erro de sistema: {e}\")\n</code></pre>"},{"location":"load/#melhorias-possiveis","title":"\ud83d\ude80 Melhorias Poss\u00edveis","text":""},{"location":"load/#validacao-de-entrada","title":"\ud83d\udd27 Valida\u00e7\u00e3o de Entrada","text":"<pre><code>def load_to_excel_enhanced(df: pd.DataFrame,\n                          output_path: str,\n                          filename: str) -&gt; str:\n    \"\"\"Vers\u00e3o com valida\u00e7\u00f5es extras\"\"\"\n\n    # Validar DataFrame\n    if df.empty:\n        raise ValueError(\"DataFrame est\u00e1 vazio\")\n\n    # Validar nome do arquivo\n    invalid_chars = '&lt;&gt;:\"/\\\\|?*'\n    if any(char in filename for char in invalid_chars):\n        raise ValueError(f\"Nome inv\u00e1lido: {filename}\")\n\n    # Salvamento normal\n    return load_to_excel(df, output_path, filename)\n</code></pre>"},{"location":"load/#multiplos-formatos","title":"\ud83d\udcca M\u00faltiplos Formatos","text":"<pre><code>def save_multiple_formats(df: pd.DataFrame,\n                         output_path: str,\n                         filename: str) -&gt; Dict[str, str]:\n    \"\"\"Salva em m\u00faltiplos formatos\"\"\"\n\n    results = {}\n\n    # Excel\n    excel_msg = load_to_excel(df, output_path, filename)\n    results['excel'] = excel_msg\n\n    # CSV\n    csv_path = os.path.join(output_path, f\"{filename}.csv\")\n    df.to_csv(csv_path, index=False)\n    results['csv'] = \"arquivo csv salvo com sucesso\"\n\n    # Parquet\n    parquet_path = os.path.join(output_path, f\"{filename}.parquet\")\n    df.to_parquet(parquet_path, index=False)\n    results['parquet'] = \"arquivo parquet salvo com sucesso\"\n\n    return results\n</code></pre>"},{"location":"load/#formatacao-excel","title":"\ud83c\udfa8 Formata\u00e7\u00e3o Excel","text":"<pre><code>def load_to_excel_formatted(df: pd.DataFrame,\n                           output_path: str,\n                           filename: str) -&gt; str:\n    \"\"\"Salva com formata\u00e7\u00e3o Excel\"\"\"\n\n    os.makedirs(output_path, exist_ok=True)\n    file_path = os.path.join(output_path, f\"{filename}.xlsx\")\n\n    # Usar ExcelWriter para formata\u00e7\u00e3o\n    with pd.ExcelWriter(file_path, engine='openpyxl') as writer:\n        df.to_excel(writer, sheet_name='Dados', index=False)\n\n        # Ajustar largura das colunas\n        worksheet = writer.sheets['Dados']\n        for column in worksheet.columns:\n            max_length = 0\n            column_letter = column[0].column_letter\n\n            for cell in column:\n                if len(str(cell.value)) &gt; max_length:\n                    max_length = len(str(cell.value))\n\n            adjusted_width = min(max_length + 2, 50)\n            worksheet.column_dimensions[column_letter].width = adjusted_width\n\n    return \"arquivo xlsx formatado salvo com sucesso\"\n</code></pre>"},{"location":"load/#formatos-de-saida","title":"\ud83d\udcca Formatos de Sa\u00edda","text":""},{"location":"load/#formato-principal","title":"\u2705 Formato Principal","text":"<ul> <li>Excel (.xlsx): Formato padr\u00e3o da fun\u00e7\u00e3o</li> </ul>"},{"location":"load/#formatos-alternativos","title":"\ud83d\udd04 Formatos Alternativos","text":"<pre><code># CSV (mais leve)\ndf.to_csv(os.path.join(output_path, f\"{filename}.csv\"), index=False)\n\n# Parquet (mais eficiente)\ndf.to_parquet(os.path.join(output_path, f\"{filename}.parquet\"), index=False)\n\n# JSON (interc\u00e2mbio)\ndf.to_json(os.path.join(output_path, f\"{filename}.json\"), orient='records')\n</code></pre>"},{"location":"load/#escolha-do-formato","title":"\ud83c\udfaf Escolha do Formato","text":"<ul> <li>Excel: Melhor para an\u00e1lise manual</li> <li>CSV: Melhor para sistemas legados</li> <li>Parquet: Melhor para big data</li> <li>JSON: Melhor para APIs</li> </ul>"},{"location":"load/#testes","title":"\ud83e\uddea Testes","text":""},{"location":"load/#testes-incluidos","title":"\ud83d\udccb Testes Inclu\u00eddos","text":"<ul> <li>\u2705 Cria\u00e7\u00e3o de arquivo e mensagem de sucesso</li> <li>\u2705 Verifica\u00e7\u00e3o de conte\u00fado salvo</li> <li>\u2705 Cria\u00e7\u00e3o autom\u00e1tica de diret\u00f3rios</li> <li>\u2705 Tratamento de caminhos aninhados</li> </ul>"},{"location":"load/#executar-testes","title":"\ud83d\udd27 Executar Testes","text":"<pre><code># Testes espec\u00edficos do m\u00f3dulo load\npoetry run pytest tests/test_load.py -v\n\n# Com cobertura\npoetry run pytest tests/test_load.py --cov=src.pipeline.load\n</code></pre>"},{"location":"load/#teste-manual","title":"\ud83e\uddea Teste Manual","text":"<pre><code># Teste r\u00e1pido da fun\u00e7\u00e3o\nfrom pipeline.load import load_to_excel\nimport pandas as pd\nimport os\n\n# Criar dados de teste\ndf = pd.DataFrame({\"col1\": [1, 2], \"col2\": [\"a\", \"b\"]})\n\n# Testar salvamento\noutput_path = \"test_output\"\nfilename = \"teste\"\nmensagem = load_to_excel(df, output_path, filename)\n\n# Verificar resultado\nassert mensagem == \"arquivo xlsx salvo com sucesso\"\nassert os.path.exists(os.path.join(output_path, f\"{filename}.xlsx\"))\nprint(\"\u2705 Teste manual passou!\")\n\n# Limpeza\nimport shutil\nshutil.rmtree(output_path)\n</code></pre>"},{"location":"load/#estrutura-de-saida","title":"\ud83d\udcc1 Estrutura de Sa\u00edda","text":""},{"location":"load/#organizacao-recomendada","title":"\ud83d\uddc2\ufe0f Organiza\u00e7\u00e3o Recomendada","text":"<pre><code>data/\n\u2514\u2500\u2500 output/\n    \u251c\u2500\u2500 \ud83d\udcca dados_concatenados.xlsx    # Sa\u00edda padr\u00e3o\n    \u251c\u2500\u2500 \ud83d\udcc8 relatorio_2024.xlsx        # Relat\u00f3rios\n    \u251c\u2500\u2500 \ud83d\uddd3\ufe0f backup_20241016.xlsx       # Backups\n    \u2514\u2500\u2500 \ud83d\udccb logs_processamento.xlsx    # Logs\n</code></pre>"},{"location":"load/#convencoes-de-nomenclatura","title":"\ud83c\udff7\ufe0f Conven\u00e7\u00f5es de Nomenclatura","text":"<pre><code># Timestamps\nfilename = f\"dados_{datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n\n# Identificadores\nfilename = f\"etl_resultado_{run_id}\"\n\n# Versionamento\nfilename = f\"dados_v{version_number}\"\n</code></pre>"},{"location":"load/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83c\udfaf Main: \ud83c\udfaf Main - Orquestra\u00e7\u00e3o completa</li> <li>\u2699\ufe0f Transform: \u2699\ufe0f Transform - Est\u00e1gio anterior</li> <li>\ud83d\udce5 Extract: \ud83d\udce5 Extract - Primeiro est\u00e1gio</li> <li>\ud83d\udcd6 Overview: \ud83d\udcd6 C\u00f3digo - Vis\u00e3o geral da arquitetura</li> </ul>"},{"location":"main/","title":"\ud83c\udfaf Main \u2014 M\u00f3dulo Principal","text":"<p>Este \u00e9 o m\u00f3dulo principal que orquestra todo o pipeline ETL do projeto, coordenando a execu\u00e7\u00e3o das tr\u00eas etapas fundamentais.</p>"},{"location":"main/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>O m\u00f3dulo <code>main.py</code> \u00e9 o ponto de entrada do pipeline ETL, respons\u00e1vel por:</p> <ul> <li>\ud83c\udfbc Orquestrar todo o fluxo de dados</li> <li>\ud83d\udce5 Coordenar a extra\u00e7\u00e3o de dados</li> <li>\u2699\ufe0f Gerenciar a transforma\u00e7\u00e3o</li> <li>\ud83d\udce4 Controlar o carregamento</li> <li>\ud83d\udcca Monitorar o progresso</li> </ul>"},{"location":"main/#funcionalidades","title":"\ud83d\udd27 Funcionalidades","text":""},{"location":"main/#capacidades","title":"\u2705 Capacidades:","text":"<ul> <li>\ud83c\udfbc Orquestra\u00e7\u00e3o completa do pipeline</li> <li>\ud83d\udccb Configura\u00e7\u00e3o centralizadas de caminhos</li> <li>\ud83d\udcca Monitoramento de tipos de dados</li> <li>\u2705 Feedback visual do progresso</li> </ul>"},{"location":"main/#performance","title":"\u26a1 Performance:","text":"<ul> <li>\ud83d\ude80 Execu\u00e7\u00e3o sequencial otimizada</li> <li>\ud83d\udcbe Gest\u00e3o eficiente de mem\u00f3ria</li> <li>\ud83d\udd04 Processamento em lote</li> </ul>"},{"location":"main/#documentacao-da-api","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o da API","text":""},{"location":"main/#funcao-principal","title":"\ud83c\udfaf Fun\u00e7\u00e3o Principal","text":"Source code in <code>src/main.py</code> <pre><code>def main() -&gt; None:\n    input_path = \"data/input\"\n    output_path = \"data/output\"\n    filename = \"dados_concatenados\"\n\n    data_list = extract_from_excel(input_path)\n    print(type(data_list))\n\n    data_frame = transform_data(data_list)\n    print(type(data_frame))\n\n    message = load_to_excel(data_frame, output_path, filename)\n    print(message)\n</code></pre>"},{"location":"main/#codigo-fonte-completo","title":"\ud83d\udcbb C\u00f3digo Fonte Completo","text":"<pre><code>from pipeline.extract import extract_from_excel\nfrom pipeline.load import load_to_excel\nfrom pipeline.transform import transform_data\n\n\ndef main() -&gt; None:\n    input_path = \"data/input\"\n    output_path = \"data/output\"\n    filename = \"dados_concatenados\"\n\n    data_list = extract_from_excel(input_path)\n    print(type(data_list))\n\n    data_frame = transform_data(data_list)\n    print(type(data_frame))\n\n    message = load_to_excel(data_frame, output_path, filename)\n    print(message)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"main/#fluxo-de-execucao","title":"\ud83d\udd04 Fluxo de Execu\u00e7\u00e3o","text":"<pre><code>graph LR\n    A[\ud83d\ude80 Iniciar] --&gt; B[\ud83d\udcc1 Configurar Caminhos]\n    B --&gt; C[\ud83d\udce5 Extract]\n    C --&gt; D[\ud83d\udcca Verificar Tipos]\n    D --&gt; E[\u2699\ufe0f Transform]\n    E --&gt; F[\ud83d\udcca Verificar Tipos]\n    F --&gt; G[\ud83d\udce4 Load]\n    G --&gt; H[\u2705 Confirmar Sucesso]\n    H --&gt; I[\ud83c\udfc1 Finalizar]\n\n    style A fill:#e3f2fd\n    style C fill:#f3e5f5\n    style E fill:#fff3e0\n    style G fill:#e8f5e8\n    style I fill:#e8f5e8</code></pre>"},{"location":"main/#configuracao-e-parametros","title":"\u2699\ufe0f Configura\u00e7\u00e3o e Par\u00e2metros","text":""},{"location":"main/#caminhos-de-dados","title":"\ud83d\udcc1 Caminhos de Dados","text":"<pre><code># Configura\u00e7\u00f5es centralizadas\ninput_path = \"data/input\"      # \ud83d\udce5 Dados de entrada\noutput_path = \"data/output\"    # \ud83d\udce4 Dados de sa\u00edda\nfilename = \"dados_concatenados\" # \ud83c\udff7\ufe0f Nome do arquivo final\n</code></pre>"},{"location":"main/#personalizacao","title":"\ud83d\udd27 Personaliza\u00e7\u00e3o","text":"<pre><code>def main_customized(input_dir: str = \"data/input\",\n                   output_dir: str = \"data/output\",\n                   output_name: str = \"resultado\") -&gt; None:\n    \"\"\"Vers\u00e3o customiz\u00e1vel da fun\u00e7\u00e3o main\"\"\"\n\n    print(f\"\ud83d\udce5 Extraindo de: {input_dir}\")\n    data_list = extract_from_excel(input_dir)\n    print(f\"\u2705 Extra\u00eddos {len(data_list)} arquivos\")\n\n    print(f\"\u2699\ufe0f Transformando dados...\")\n    data_frame = transform_data(data_list)\n    print(f\"\u2705 Dados consolidados: {data_frame.shape}\")\n\n    print(f\"\ud83d\udce4 Salvando em: {output_dir}/{output_name}.xlsx\")\n    message = load_to_excel(data_frame, output_dir, output_name)\n    print(f\"\u2705 {message}\")\n</code></pre>"},{"location":"main/#monitoramento-e-debug","title":"\ud83d\udcca Monitoramento e Debug","text":""},{"location":"main/#informacoes-de-debug","title":"\ud83d\udd0d Informa\u00e7\u00f5es de Debug","text":"<pre><code>def main_verbose() -&gt; None:\n    \"\"\"Vers\u00e3o com informa\u00e7\u00f5es detalhadas\"\"\"\n\n    input_path = \"data/input\"\n    output_path = \"data/output\"\n    filename = \"dados_concatenados\"\n\n    print(\"\ud83d\ude80 Iniciando pipeline ETL...\")\n\n    # Extract\n    print(\"\ud83d\udce5 Fase 1: Extra\u00e7\u00e3o\")\n    data_list = extract_from_excel(input_path)\n    print(f\"   \ud83d\udcca Tipo: {type(data_list)}\")\n    print(f\"   \ud83d\udccb Arquivos: {len(data_list)}\")\n    for i, df in enumerate(data_list):\n        print(f\"   \ud83d\udcc4 Arquivo {i+1}: {df.shape}\")\n\n    # Transform\n    print(\"\u2699\ufe0f Fase 2: Transforma\u00e7\u00e3o\")\n    data_frame = transform_data(data_list)\n    print(f\"   \ud83d\udcca Tipo: {type(data_frame)}\")\n    print(f\"   \ud83d\udcd0 Shape: {data_frame.shape}\")\n    print(f\"   \ud83c\udff7\ufe0f Colunas: {list(data_frame.columns)}\")\n\n    # Load\n    print(\"\ud83d\udce4 Fase 3: Carregamento\")\n    message = load_to_excel(data_frame, output_path, filename)\n    print(f\"   \u2705 {message}\")\n\n    print(\"\ud83c\udfc1 Pipeline conclu\u00eddo com sucesso!\")\n</code></pre>"},{"location":"main/#metricas-de-performance","title":"\ud83d\udcc8 M\u00e9tricas de Performance","text":"<pre><code>import time\nfrom typing import Dict, Any\n\ndef main_with_metrics() -&gt; Dict[str, Any]:\n    \"\"\"Vers\u00e3o com m\u00e9tricas de performance\"\"\"\n\n    metrics = {}\n    start_time = time.time()\n\n    input_path = \"data/input\"\n    output_path = \"data/output\"\n    filename = \"dados_concatenados\"\n\n    # Extract\n    extract_start = time.time()\n    data_list = extract_from_excel(input_path)\n    extract_time = time.time() - extract_start\n    metrics['extract_time'] = extract_time\n    metrics['files_processed'] = len(data_list)\n\n    # Transform\n    transform_start = time.time()\n    data_frame = transform_data(data_list)\n    transform_time = time.time() - transform_start\n    metrics['transform_time'] = transform_time\n    metrics['final_rows'] = len(data_frame)\n    metrics['final_columns'] = len(data_frame.columns)\n\n    # Load\n    load_start = time.time()\n    message = load_to_excel(data_frame, output_path, filename)\n    load_time = time.time() - load_start\n    metrics['load_time'] = load_time\n\n    # Total\n    total_time = time.time() - start_time\n    metrics['total_time'] = total_time\n\n    print(\"\ud83d\udcca M\u00e9tricas de Performance:\")\n    print(f\"   \ud83d\udce5 Extra\u00e7\u00e3o: {extract_time:.2f}s\")\n    print(f\"   \u2699\ufe0f Transforma\u00e7\u00e3o: {transform_time:.2f}s\")\n    print(f\"   \ud83d\udce4 Carregamento: {load_time:.2f}s\")\n    print(f\"   \ud83d\udd50 Total: {total_time:.2f}s\")\n\n    return metrics\n</code></pre>"},{"location":"main/#tratamento-de-erros","title":"\ud83d\udee0\ufe0f Tratamento de Erros","text":""},{"location":"main/#versao-robusta","title":"\ud83d\udd27 Vers\u00e3o Robusta","text":"<pre><code>def main_robust() -&gt; bool:\n    \"\"\"Vers\u00e3o com tratamento de erros\"\"\"\n\n    try:\n        input_path = \"data/input\"\n        output_path = \"data/output\"\n        filename = \"dados_concatenados\"\n\n        # Extract\n        print(\"\ud83d\udce5 Extraindo dados...\")\n        data_list = extract_from_excel(input_path)\n\n        if not data_list:\n            print(\"\u274c Nenhum arquivo encontrado para processar\")\n            return False\n\n        print(f\"\u2705 {len(data_list)} arquivos extra\u00eddos\")\n\n        # Transform\n        print(\"\u2699\ufe0f Transformando dados...\")\n        data_frame = transform_data(data_list)\n        print(f\"\u2705 Dados consolidados: {data_frame.shape}\")\n\n        # Load\n        print(\"\ud83d\udce4 Salvando resultado...\")\n        message = load_to_excel(data_frame, output_path, filename)\n        print(f\"\u2705 {message}\")\n\n        return True\n\n    except FileNotFoundError as e:\n        print(f\"\u274c Arquivo n\u00e3o encontrado: {e}\")\n        return False\n    except ValueError as e:\n        print(f\"\u274c Erro de dados: {e}\")\n        return False\n    except Exception as e:\n        print(f\"\u274c Erro inesperado: {e}\")\n        return False\n</code></pre>"},{"location":"main/#formas-de-execucao","title":"\ud83d\ude80 Formas de Execu\u00e7\u00e3o","text":""},{"location":"main/#execucao-padrao","title":"\u26a1 Execu\u00e7\u00e3o Padr\u00e3o","text":"<pre><code># Via Poetry (recomendado)\npoetry run python src/main.py\n\n# Via task\npoetry run task run\n\n# Com shell ativo\npoetry shell\npython src/main.py\n</code></pre>"},{"location":"main/#execucao-customizada","title":"\ud83d\udd27 Execu\u00e7\u00e3o Customizada","text":"<pre><code># Em um script ou notebook\nfrom src.main import main\n\n# Execu\u00e7\u00e3o normal\nmain()\n\n# Ou importar e executar partes\nfrom src.pipeline.extract import extract_from_excel\nfrom src.pipeline.transform import transform_data\nfrom src.pipeline.load import load_to_excel\n\n# Execu\u00e7\u00e3o manual das etapas\ndata_list = extract_from_excel(\"data/input\")\ndf = transform_data(data_list)\nload_to_excel(df, \"data/output\", \"meu_resultado\")\n</code></pre>"},{"location":"main/#saida-esperada","title":"\ud83d\udcca Sa\u00edda Esperada","text":""},{"location":"main/#execucao-bem-sucedida","title":"\u2705 Execu\u00e7\u00e3o Bem-sucedida","text":"<pre><code>&lt;class 'list'&gt;\n&lt;class 'pandas.core.frame.DataFrame'&gt;\narquivo xlsx salvo com sucesso\n</code></pre>"},{"location":"main/#interpretacao","title":"\ud83d\udccb Interpreta\u00e7\u00e3o","text":"<ul> <li>Linha 1: Confirma que <code>extract_from_excel</code> retorna uma lista</li> <li>Linha 2: Confirma que <code>transform_data</code> retorna um DataFrame</li> <li>Linha 3: Confirma que <code>load_to_excel</code> salvou com sucesso</li> </ul>"},{"location":"main/#testes","title":"\ud83e\uddea Testes","text":""},{"location":"main/#testes-incluidos","title":"\ud83d\udccb Testes Inclu\u00eddos","text":"<ul> <li>\u2705 Execu\u00e7\u00e3o completa do pipeline via <code>runpy</code></li> <li>\u2705 Verifica\u00e7\u00e3o de chamadas de fun\u00e7\u00e3o com mocks</li> <li>\u2705 Valida\u00e7\u00e3o de sa\u00edda impressa</li> <li>\u2705 Teste de integra\u00e7\u00e3o end-to-end</li> </ul>"},{"location":"main/#executar-testes","title":"\ud83d\udd27 Executar Testes","text":"<pre><code># Testes espec\u00edficos do main\npoetry run pytest tests/test_pipeline.py -v\n\n# Teste de integra\u00e7\u00e3o\npoetry run pytest tests/test_pipeline.py::test_main_integration -v\n</code></pre>"},{"location":"main/#extensoes-possiveis","title":"\ud83d\udd04 Extens\u00f5es Poss\u00edveis","text":""},{"location":"main/#logging","title":"\ud83d\udcca Logging","text":"<pre><code>import logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef main_with_logging() -&gt; None:\n    \"\"\"Vers\u00e3o com logging estruturado\"\"\"\n\n    logger.info(\"Iniciando pipeline ETL\")\n\n    # Extract\n    logger.info(\"Fase: Extra\u00e7\u00e3o\")\n    data_list = extract_from_excel(\"data/input\")\n    logger.info(f\"Extra\u00eddos {len(data_list)} arquivos\")\n\n    # Transform\n    logger.info(\"Fase: Transforma\u00e7\u00e3o\")\n    data_frame = transform_data(data_list)\n    logger.info(f\"Dados consolidados: {data_frame.shape}\")\n\n    # Load\n    logger.info(\"Fase: Carregamento\")\n    message = load_to_excel(data_frame, \"data/output\", \"dados_concatenados\")\n    logger.info(f\"Resultado: {message}\")\n\n    logger.info(\"Pipeline conclu\u00eddo\")\n</code></pre>"},{"location":"main/#configuracao-externa","title":"\ud83d\udd27 Configura\u00e7\u00e3o Externa","text":"<pre><code>import json\nfrom pathlib import Path\n\ndef main_with_config(config_path: str = \"config.json\") -&gt; None:\n    \"\"\"Vers\u00e3o com arquivo de configura\u00e7\u00e3o\"\"\"\n\n    # Carregar configura\u00e7\u00e3o\n    if Path(config_path).exists():\n        with open(config_path, 'r') as f:\n            config = json.load(f)\n    else:\n        config = {\n            \"input_path\": \"data/input\",\n            \"output_path\": \"data/output\",\n            \"filename\": \"dados_concatenados\"\n        }\n\n    # Executar pipeline\n    data_list = extract_from_excel(config[\"input_path\"])\n    data_frame = transform_data(data_list)\n    message = load_to_excel(\n        data_frame,\n        config[\"output_path\"],\n        config[\"filename\"]\n    )\n\n    print(f\"\u2705 Pipeline executado: {message}\")\n</code></pre>"},{"location":"main/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83d\udce5 Extract: \ud83d\udce5 Extract - Primeiro est\u00e1gio do pipeline</li> <li>\u2699\ufe0f Transform: \u2699\ufe0f Transform - Segundo est\u00e1gio</li> <li>\ud83d\udce4 Load: \ud83d\udce4 Load - Terceiro est\u00e1gio</li> <li>\ud83d\udcd6 Overview: \ud83d\udcd6 C\u00f3digo - Vis\u00e3o geral da arquitetura</li> </ul>"},{"location":"pipeline/","title":"\ud83d\ude80 Pipeline \u2014 Execu\u00e7\u00e3o do Projeto ETL","text":"<p>Esta p\u00e1gina mostra como executar o pipeline ETL do projeto, desde a prepara\u00e7\u00e3o dos dados at\u00e9 a verifica\u00e7\u00e3o dos resultados.</p>"},{"location":"pipeline/#visao-geral-do-pipeline","title":"\ud83d\udcca Vis\u00e3o Geral do Pipeline","text":"<pre><code>graph LR\n    A[\ud83d\udce5 Arquivos Excel] --&gt; B[\ud83d\udd04 Extract]\n    B --&gt; C[\u2699\ufe0f Transform]\n    C --&gt; D[\ud83d\udce4 Load]\n    D --&gt; E[\ud83d\udccb Resultado Final]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#fce4ec</code></pre>"},{"location":"pipeline/#fluxo-do-processo","title":"\ud83c\udfaf Fluxo do Processo:","text":"<ol> <li>\ud83d\udce5 Extract: L\u00ea arquivos <code>.xlsx</code> de <code>data/input/</code></li> <li>\u2699\ufe0f Transform: Concatena todos os DataFrames</li> <li>\ud83d\udce4 Load: Salva resultado em <code>data/output/dados_concatenados.xlsx</code></li> </ol>"},{"location":"pipeline/#como-executar","title":"\ud83d\ude80 Como Executar","text":""},{"location":"pipeline/#execucao-rapida-recomendada","title":"\u26a1 Execu\u00e7\u00e3o R\u00e1pida (Recomendada)","text":"<pre><code># Usando task do Poetry\npoetry run task run\n</code></pre>"},{"location":"pipeline/#execucao-manual","title":"\ud83d\udd27 Execu\u00e7\u00e3o Manual","text":"<pre><code># Op\u00e7\u00e3o 1: Via Poetry (sem ativar shell)\npoetry run python src/main.py\n\n# Op\u00e7\u00e3o 2: Ativando o shell do Poetry\npoetry shell\npython src/main.py\n</code></pre>"},{"location":"pipeline/#preparacao-dos-dados","title":"\ud83d\udcc1 Prepara\u00e7\u00e3o dos Dados","text":""},{"location":"pipeline/#requisitos","title":"\ud83d\udccb Requisitos:","text":"<ul> <li>\u2705 Arquivos Excel (<code>.xlsx</code>) na pasta <code>data/input/</code></li> <li>\u2705 Mesmo esquema de colunas em todos os arquivos</li> <li>\u2705 Ambiente Python configurado com Poetry</li> </ul>"},{"location":"pipeline/#estrutura-de-arquivos","title":"\ud83d\uddc2\ufe0f Estrutura de Arquivos:","text":"<pre><code>projeto/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 input/           # \ud83d\udce5 Coloque seus arquivos .xlsx aqui\n\u2502   \u2502   \u251c\u2500\u2500 arquivo1.xlsx\n\u2502   \u2502   \u251c\u2500\u2500 arquivo2.xlsx\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 output/          # \ud83d\udce4 Resultado ser\u00e1 gerado aqui\n\u2502       \u2514\u2500\u2500 dados_concatenados.xlsx\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 main.py         # \ud83c\udfaf Script principal\n</code></pre>"},{"location":"pipeline/#verificacao-dos-resultados","title":"\u2705 Verifica\u00e7\u00e3o dos Resultados","text":""},{"location":"pipeline/#durante-a-execucao","title":"\ud83d\udd0d Durante a Execu\u00e7\u00e3o:","text":"<p>O script mostra informa\u00e7\u00f5es sobre o processamento:</p> <pre><code>&lt;class 'list'&gt;                    # Lista de DataFrames extra\u00eddos\n&lt;class 'pandas.core.frame.DataFrame'&gt;  # DataFrame concatenado\narquivo xlsx salvo com sucesso    # Confirma\u00e7\u00e3o de salvamento\n</code></pre>"},{"location":"pipeline/#arquivo-de-saida","title":"\ud83d\udcca Arquivo de Sa\u00edda:","text":"<ul> <li>Local: <code>data/output/dados_concatenados.xlsx</code></li> <li>Conte\u00fado: Todos os dados dos arquivos de entrada concatenados</li> <li>Formato: Excel sem \u00edndices (linhas numeradas automaticamente)</li> </ul>"},{"location":"pipeline/#solucao-de-problemas","title":"\ud83d\udee0\ufe0f Solu\u00e7\u00e3o de Problemas","text":""},{"location":"pipeline/#erro-no-such-file-or-directory","title":"\u274c Erro: \"No such file or directory\"","text":"<p>Causa: Pasta <code>data/input/</code> n\u00e3o existe ou est\u00e1 vazia Solu\u00e7\u00e3o: <pre><code>mkdir -p data/input\n# Adicione arquivos .xlsx na pasta\n</code></pre></p>"},{"location":"pipeline/#erro-no-module-named-openpyxl","title":"\u274c Erro: \"No module named 'openpyxl'\"","text":"<p>Causa: Depend\u00eancia para Excel n\u00e3o instalada Solu\u00e7\u00e3o: <pre><code>poetry install\n</code></pre></p>"},{"location":"pipeline/#erro-permission-denied-no-windows","title":"\u274c Erro: \"Permission denied\" no Windows","text":"<p>Causa: Arquivo de sa\u00edda aberto no Excel Solu\u00e7\u00e3o: Feche o arquivo Excel e execute novamente</p>"},{"location":"pipeline/#documentacao-tecnica","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o T\u00e9cnica","text":"<p>Para informa\u00e7\u00f5es detalhadas sobre o c\u00f3digo e fun\u00e7\u00f5es:</p> <ul> <li>\ud83d\udcd6 Overview do C\u00f3digo - Arquitetura geral</li> <li>\ud83c\udfaf Main - Fun\u00e7\u00e3o principal</li> <li>\ud83d\udce5 Extract - M\u00f3dulo de extra\u00e7\u00e3o</li> <li>\u2699\ufe0f Transform - M\u00f3dulo de transforma\u00e7\u00e3o</li> <li>\ud83d\udce4 Load - M\u00f3dulo de carregamento</li> </ul> <p>Para d\u00favidas sobre configura\u00e7\u00e3o inicial, consulte \u2699\ufe0f Setup</p>"},{"location":"precommit/","title":"\ud83d\udd0d Pre-commit \u2014 Hooks de Qualidade","text":"<p>Esta p\u00e1gina explica como o pre-commit funciona no projeto, garantindo qualidade e consist\u00eancia do c\u00f3digo antes de cada commit.</p>"},{"location":"precommit/#o-que-e-pre-commit","title":"\ud83c\udfaf O que \u00e9 Pre-commit?","text":"<p>O pre-commit \u00e9 uma ferramenta que executa verifica\u00e7\u00f5es autom\u00e1ticas antes de cada commit:</p> <ul> <li>\u2705 Formata\u00e7\u00e3o consistente do c\u00f3digo</li> <li>\ud83d\udd0d Verifica\u00e7\u00f5es de qualidade</li> <li>\ud83e\uddf9 Limpeza autom\u00e1tica de arquivos</li> <li>\ud83d\udeab Previne commits com problemas</li> </ul>"},{"location":"precommit/#configuracao-do-projeto","title":"\u2699\ufe0f Configura\u00e7\u00e3o do Projeto","text":""},{"location":"precommit/#arquivo-pre-commit-configyaml","title":"\ud83d\udcc4 Arquivo <code>.pre-commit-config.yaml</code>","text":"<pre><code>repos:\n  - repo: https://github.com/psf/black\n    rev: 25.9.0\n    hooks:\n      - id: black\n        language_version: python3.12\n\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n        name: isort\n        language_version: python3.12\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n</code></pre>"},{"location":"precommit/#hooks-configurados","title":"\ud83d\udee0\ufe0f Hooks Configurados","text":""},{"location":"precommit/#black-formatador-de-codigo","title":"\ud83c\udfa8 Black - Formatador de C\u00f3digo","text":"<ul> <li>Fun\u00e7\u00e3o: Formata c\u00f3digo Python automaticamente</li> <li>Configura\u00e7\u00e3o: <code>line-length = 88</code>, <code>target-version = py312</code></li> <li>Benef\u00edcio: C\u00f3digo consistente, sem discuss\u00f5es sobre estilo</li> </ul>"},{"location":"precommit/#isort-organizador-de-imports","title":"\ud83d\udccb isort - Organizador de Imports","text":"<ul> <li>Fun\u00e7\u00e3o: Organiza e agrupa imports</li> <li>Ordem: Standard library \u2192 Third party \u2192 Local</li> <li>Benef\u00edcio: Imports limpos e organizados</li> </ul>"},{"location":"precommit/#end-of-file-fixer-corretor-de-final-de-arquivo","title":"\ud83d\udcc4 end-of-file-fixer - Corretor de Final de Arquivo","text":"<ul> <li>Fun\u00e7\u00e3o: Garante nova linha no final dos arquivos</li> <li>Benef\u00edcio: Compatibilidade com ferramentas Unix</li> </ul>"},{"location":"precommit/#trailing-whitespace-removedor-de-espacos","title":"\ud83e\uddf9 trailing-whitespace - Removedor de Espa\u00e7os","text":"<ul> <li>Fun\u00e7\u00e3o: Remove espa\u00e7os desnecess\u00e1rios no final das linhas</li> <li>Benef\u00edcio: Arquivos limpos, diffs menores</li> </ul>"},{"location":"precommit/#instalacao-e-configuracao","title":"\ud83d\ude80 Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":""},{"location":"precommit/#1-instalar-pre-commit","title":"\ud83d\udce6 1. Instalar Pre-commit","text":"<pre><code># Pre-commit j\u00e1 est\u00e1 nas depend\u00eancias do projeto\npoetry install\n</code></pre>"},{"location":"precommit/#2-ativar-hooks-no-git","title":"\u2699\ufe0f 2. Ativar Hooks no Git","text":"<pre><code># Instalar hooks localmente (uma vez por clone)\npoetry run pre-commit install\n</code></pre>"},{"location":"precommit/#3-verificar-instalacao","title":"\u2705 3. Verificar Instala\u00e7\u00e3o","text":"<pre><code># Testar se est\u00e1 funcionando\npoetry run pre-commit --version\n</code></pre>"},{"location":"precommit/#usando-pre-commit","title":"\ud83d\udd27 Usando Pre-commit","text":""},{"location":"precommit/#execucao-automatica","title":"\ud83e\udd16 Execu\u00e7\u00e3o Autom\u00e1tica","text":"<p>Os hooks executam automaticamente a cada <code>git commit</code>:</p> <pre><code>git add .\ngit commit -m \"feat: nova funcionalidade\"\n\n# Output:\nblack....................................................................Passed\nisort....................................................................Passed\nfix end of files.....................................................Passed\ntrim trailing whitespace.............................................Passed\n[main abc1234] feat: nova funcionalidade\n</code></pre>"},{"location":"precommit/#execucao-manual","title":"\ud83d\udee0\ufe0f Execu\u00e7\u00e3o Manual","text":""},{"location":"precommit/#todos-os-hooks-todos-os-arquivos","title":"\ud83d\udd0d Todos os hooks, todos os arquivos","text":"<pre><code>poetry run pre-commit run --all-files\n</code></pre>"},{"location":"precommit/#hook-especifico","title":"\ud83c\udfaf Hook espec\u00edfico","text":"<pre><code># Apenas Black\npoetry run pre-commit run black --all-files\n\n# Apenas isort\npoetry run pre-commit run isort --all-files\n</code></pre>"},{"location":"precommit/#arquivos-especificos","title":"\ud83d\udcc1 Arquivos espec\u00edficos","text":"<pre><code># Apenas arquivos staged\npoetry run pre-commit run\n\n# Arquivo espec\u00edfico\npoetry run pre-commit run --files src/main.py\n</code></pre>"},{"location":"precommit/#formatacao-de-codigo","title":"\ud83c\udfa8 Formata\u00e7\u00e3o de C\u00f3digo","text":""},{"location":"precommit/#task-de-formatacao-recomendada","title":"\u26a1 Task de Formata\u00e7\u00e3o (Recomendada)","text":"<pre><code># Usando task do Poetry\npoetry run task format\n</code></pre>"},{"location":"precommit/#comandos-individuais","title":"\ud83d\udd27 Comandos Individuais","text":"<pre><code># isort + black manualmente\npoetry run isort .\npoetry run black .\n\n# Verificar apenas (sem alterar)\npoetry run black --check .\npoetry run isort --check .\n</code></pre>"},{"location":"precommit/#com-shell-ativado","title":"\ud83d\udc1a Com Shell Ativado","text":"<pre><code># Ativar ambiente\npoetry shell\n\n# Executar formata\u00e7\u00e3o\ntask format\n\n# Ou comandos individuais\nisort .\nblack .\n</code></pre>"},{"location":"precommit/#fluxo-de-trabalho","title":"\ud83d\udd04 Fluxo de Trabalho","text":""},{"location":"precommit/#desenvolvimento-normal","title":"\ud83d\udcdd Desenvolvimento Normal","text":"<pre><code>graph LR\n    A[\u270f\ufe0f Editar C\u00f3digo] --&gt; B[\ud83d\udcc1 git add]\n    B --&gt; C[\ud83d\udcbe git commit]\n    C --&gt; D{\ud83d\udd0d Pre-commit}\n    D --&gt;|\u2705 Pass| E[\u2705 Commit OK]\n    D --&gt;|\u274c Fail| F[\ud83d\udd27 Corre\u00e7\u00f5es]\n    F --&gt; G[\ud83d\udcc1 git add]\n    G --&gt; C\n\n    style E fill:#e8f5e8\n    style F fill:#ffebee</code></pre>"},{"location":"precommit/#quando-hooks-fazem-correcoes","title":"\ud83d\udee0\ufe0f Quando Hooks Fazem Corre\u00e7\u00f5es","text":"<pre><code># 1. Fazer commit\ngit commit -m \"nova feature\"\n\n# 2. Se hooks corrigiram arquivos:\nblack....................................................................Failed\n- hook id: black\n- files were modified by this hook\n\n# 3. Adicionar corre\u00e7\u00f5es e commitar novamente\ngit add .\ngit commit -m \"nova feature\"\n</code></pre>"},{"location":"precommit/#validacao-e-teste","title":"\ud83e\uddea Valida\u00e7\u00e3o e Teste","text":""},{"location":"precommit/#verificar-se-commit-passara","title":"\u2705 Verificar se Commit Passar\u00e1","text":"<pre><code># Testar todos os hooks antes de commitar\npoetry run pre-commit run --all-files\n</code></pre>"},{"location":"precommit/#debug-de-problemas","title":"\ud83d\udd0d Debug de Problemas","text":"<pre><code># Verbose mode para mais detalhes\npoetry run pre-commit run --all-files --verbose\n\n# Hook espec\u00edfico com debug\npoetry run pre-commit run black --all-files --verbose\n</code></pre>"},{"location":"precommit/#status-dos-hooks","title":"\ud83d\udcca Status dos Hooks","text":"<pre><code># Listar hooks instalados\npoetry run pre-commit hooks\n\n# Informa\u00e7\u00f5es sobre configura\u00e7\u00e3o\npoetry run pre-commit sample-config\n</code></pre>"},{"location":"precommit/#solucao-de-problemas","title":"\ud83d\udee0\ufe0f Solu\u00e7\u00e3o de Problemas","text":""},{"location":"precommit/#pre-commit-command-not-found","title":"\u274c \"pre-commit command not found\"","text":"<pre><code># Instalar depend\u00eancias\npoetry install\n\n# Verificar se pre-commit est\u00e1 dispon\u00edvel\npoetry run pre-commit --version\n</code></pre>"},{"location":"precommit/#hooks-nao-executam-automaticamente","title":"\u274c Hooks n\u00e3o executam automaticamente","text":"<pre><code># Reinstalar hooks\npoetry run pre-commit uninstall\npoetry run pre-commit install\n</code></pre>"},{"location":"precommit/#blackisort-nao-encontrados","title":"\u274c Black/isort n\u00e3o encontrados","text":"<pre><code># Atualizar hooks\npoetry run pre-commit autoupdate\n\n# Limpar cache\npoetry run pre-commit clean\n</code></pre>"},{"location":"precommit/#erro-de-versao-do-python","title":"\u274c Erro de vers\u00e3o do Python","text":"<pre><code># Verificar vers\u00e3o no .pre-commit-config.yaml\n# Deve corresponder \u00e0 vers\u00e3o do projeto (python3.12)\n\n# Atualizar vers\u00e3o se necess\u00e1rio\npoetry run pre-commit autoupdate\n</code></pre>"},{"location":"precommit/#personalizacao","title":"\u2699\ufe0f Personaliza\u00e7\u00e3o","text":""},{"location":"precommit/#configurar-black-pyprojecttoml","title":"\ud83d\udd27 Configurar Black (pyproject.toml)","text":"<pre><code>[tool.black]\nline-length = 88\ntarget-version = [\"py312\"]\n</code></pre>"},{"location":"precommit/#configurar-isort-pyprojecttoml","title":"\ud83d\udccb Configurar isort (pyproject.toml)","text":"<pre><code>[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\n</code></pre>"},{"location":"precommit/#adicionar-novos-hooks","title":"\u2795 Adicionar Novos Hooks","text":"<p>Edite <code>.pre-commit-config.yaml</code>: <pre><code>  - repo: https://github.com/PyCQA/flake8\n    rev: 6.1.0\n    hooks:\n      - id: flake8\n</code></pre></p>"},{"location":"precommit/#integracao-com-ci","title":"\ud83d\udd17 Integra\u00e7\u00e3o com CI","text":"<p>Os mesmos hooks executam no GitHub Actions:</p> <pre><code># .github/workflows/ci.yml\n- name: Check formatting\n  run: poetry run black --check .\n\n- name: Check imports\n  run: poetry run isort --check .\n</code></pre> <p>Veja mais detalhes em \ud83d\ude80 CI.</p>"},{"location":"precommit/#tasks-do-projeto","title":"\ud83d\udcda Tasks do Projeto","text":"<p>O projeto define tasks \u00fateis no <code>pyproject.toml</code>:</p> <pre><code># Formata\u00e7\u00e3o completa\npoetry run task format    # isort + black\n\n# Executar testes\npoetry run task test      # pytest com cobertura\n\n# Executar pipeline\npoetry run task run       # python src/main.py\n\n# Documenta\u00e7\u00e3o\npoetry run task doc       # mkdocs serve\n</code></pre>"},{"location":"precommit/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83d\udcc2 Configure Git: \ud83d\udcc2 Git</li> <li>\ud83d\ude80 Configure CI: \ud83d\ude80 CI</li> <li>\ud83e\uddea Execute Testes: \ud83e\uddea Tests</li> <li>\ud83d\ude80 Execute Pipeline: \ud83d\udccb Pipeline</li> </ul>"},{"location":"pyenv/","title":"\ud83d\udc0d Pyenv \u2014 Gerenciamento de Vers\u00f5es Python","text":"<p>Esta p\u00e1gina mostra como instalar e usar o pyenv para gerenciar m\u00faltiplas vers\u00f5es do Python e integr\u00e1-lo com o Poetry.</p>"},{"location":"pyenv/#por-que-usar-pyenv","title":"\ud83c\udfaf Por que usar Pyenv?","text":""},{"location":"pyenv/#beneficios","title":"\u2705 Benef\u00edcios:","text":"<ul> <li>\ud83d\udd04 M\u00faltiplas vers\u00f5es do Python lado a lado</li> <li>\ud83c\udfaf Vers\u00e3o exata especificada no <code>pyproject.toml</code></li> <li>\ud83e\uddea Teste de c\u00f3digo em diferentes vers\u00f5es</li> <li>\ud83d\udd12 Isolamento entre projetos</li> <li>\ud83d\ude80 Troca r\u00e1pida entre vers\u00f5es</li> </ul>"},{"location":"pyenv/#instalacao-por-sistema-operacional","title":"\ud83d\udcbb Instala\u00e7\u00e3o por Sistema Operacional","text":""},{"location":"pyenv/#windows-pyenv-win","title":"\ud83e\ude9f Windows (pyenv-win)","text":""},{"location":"pyenv/#1-instalar-via-git","title":"\ud83d\udce5 1. Instalar via Git","text":"<pre><code># Clone o reposit\u00f3rio pyenv-win\ngit clone https://github.com/pyenv-win/pyenv-win.git $HOME\\.pyenv\n</code></pre>"},{"location":"pyenv/#2-configurar-path","title":"\u2699\ufe0f 2. Configurar PATH","text":"<pre><code># Abrir perfil do PowerShell\nnotepad $PROFILE\n\n# Adicionar ao arquivo (copie e cole):\n$env:PYENV = \"$HOME\\.pyenv\\pyenv-win\\bin\"\n$env:PATH = \"$env:PYENV;$env:PATH\"\n</code></pre>"},{"location":"pyenv/#3-recarregar-terminal","title":"\ud83d\udd04 3. Recarregar Terminal","text":"<pre><code># Recarregar perfil\n&amp; $PROFILE\n\n# OU reiniciar PowerShell\n</code></pre>"},{"location":"pyenv/#4-verificar-instalacao","title":"\u2705 4. Verificar Instala\u00e7\u00e3o","text":"<pre><code>pyenv --version\n# Sa\u00edda esperada: pyenv 2.64.0 (ou vers\u00e3o mais recente)\n</code></pre>"},{"location":"pyenv/#macos","title":"\ud83c\udf4e macOS","text":"<pre><code># Usando Homebrew (recomendado)\nbrew install pyenv\n\n# Adicionar ao ~/.zshrc ou ~/.bash_profile\necho 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' &gt;&gt; ~/.zshrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc\n\n# Recarregar shell\nsource ~/.zshrc\n</code></pre>"},{"location":"pyenv/#linux-ubuntudebian","title":"\ud83d\udc27 Linux (Ubuntu/Debian)","text":"<pre><code># Instalar depend\u00eancias\nsudo apt-get update\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev \\\nlibbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \\\nlibncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git\n\n# Instalar pyenv\ncurl https://pyenv.run | bash\n\n# Adicionar ao ~/.bashrc\necho 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\n\n# Recarregar shell\nsource ~/.bashrc\n</code></pre>"},{"location":"pyenv/#usando-o-pyenv","title":"\ud83d\ude80 Usando o Pyenv","text":""},{"location":"pyenv/#comandos-essenciais","title":"\ud83d\udccb Comandos Essenciais","text":""},{"location":"pyenv/#listar-versoes-disponiveis","title":"\ud83d\udd0d Listar vers\u00f5es dispon\u00edveis","text":"<pre><code>pyenv install --list\n# Mostra todas as vers\u00f5es dispon\u00edveis para instala\u00e7\u00e3o\n</code></pre>"},{"location":"pyenv/#instalar-versao-especifica","title":"\ud83d\udce5 Instalar vers\u00e3o espec\u00edfica","text":"<pre><code># Instalar Python 3.12.7 (vers\u00e3o do projeto)\npyenv install 3.12.7\n</code></pre>"},{"location":"pyenv/#listar-versoes-instaladas","title":"\ud83d\udcca Listar vers\u00f5es instaladas","text":"<pre><code>pyenv versions\n# Exemplo de sa\u00edda:\n#   system\n# * 3.12.7 (set by /path/to/.python-version)\n#   3.11.4\n#   3.10.12\n</code></pre>"},{"location":"pyenv/#definir-versao-global-sistema","title":"\ud83c\udf0d Definir vers\u00e3o global (sistema)","text":"<pre><code>pyenv global 3.12.7\n</code></pre>"},{"location":"pyenv/#definir-versao-local-projeto","title":"\ud83d\udcc1 Definir vers\u00e3o local (projeto)","text":"<pre><code>cd estrutura_workshop\npyenv local 3.12.7\n# Cria arquivo .python-version\n</code></pre>"},{"location":"pyenv/#verificar-versao-ativa","title":"\u2705 Verificar vers\u00e3o ativa","text":"<pre><code>python --version\n# ou\npyenv which python\n</code></pre>"},{"location":"pyenv/#integracao-com-poetry","title":"\ud83d\udd17 Integra\u00e7\u00e3o com Poetry","text":""},{"location":"pyenv/#configuracao-recomendada","title":"\u2699\ufe0f Configura\u00e7\u00e3o Recomendada","text":""},{"location":"pyenv/#1-definir-versao-local-do-projeto","title":"1\ufe0f\u20e3 Definir vers\u00e3o local do projeto","text":"<pre><code>cd estrutura_workshop\npyenv local 3.12.7\n</code></pre>"},{"location":"pyenv/#2-configurar-poetry-para-usar-pyenv","title":"2\ufe0f\u20e3 Configurar Poetry para usar pyenv","text":"<pre><code># Op\u00e7\u00e3o 1: Usar vers\u00e3o atual\npoetry env use python\n\n# Op\u00e7\u00e3o 2: Usar caminho espec\u00edfico\npoetry env use $(pyenv which python)\n\n# Windows PowerShell:\n$py = pyenv which python\npoetry env use $py\n</code></pre>"},{"location":"pyenv/#3-verificar-configuracao","title":"3\ufe0f\u20e3 Verificar configura\u00e7\u00e3o","text":"<pre><code>poetry env info\n# Deve mostrar Python 3.12.7\n</code></pre>"},{"location":"pyenv/#4-instalar-dependencias","title":"4\ufe0f\u20e3 Instalar depend\u00eancias","text":"<pre><code>poetry install\n</code></pre>"},{"location":"pyenv/#workflow-tipico","title":"\ud83d\udd04 Workflow T\u00edpico","text":""},{"location":"pyenv/#para-novo-projeto","title":"\ud83d\udcdd Para Novo Projeto","text":"<pre><code># 1. Navegar para diret\u00f3rio do projeto\ncd meu-projeto\n\n# 2. Definir vers\u00e3o Python\npyenv local 3.12.7\n\n# 3. Configurar Poetry\npoetry env use python\npoetry install\n\n# 4. Ativar ambiente\npoetry shell\n</code></pre>"},{"location":"pyenv/#para-projeto-existente","title":"\ud83d\udd27 Para Projeto Existente","text":"<pre><code># 1. Clonar reposit\u00f3rio\ngit clone &lt;repo-url&gt;\ncd projeto\n\n# 2. Pyenv detecta vers\u00e3o automaticamente (.python-version)\npython --version\n\n# 3. Se necess\u00e1rio, instalar vers\u00e3o\npyenv install 3.12.7\n\n# 4. Configurar Poetry\npoetry env use python\npoetry install\n</code></pre>"},{"location":"pyenv/#solucao-de-problemas","title":"\ud83d\udee0\ufe0f Solu\u00e7\u00e3o de Problemas","text":""},{"location":"pyenv/#pyenv-command-not-found","title":"\u274c \"pyenv: command not found\"","text":""},{"location":"pyenv/#windows","title":"\ud83e\ude9f Windows:","text":"<pre><code># Verificar se PATH foi adicionado\necho $env:PATH | Select-String \"pyenv\"\n\n# Recarregar perfil\n&amp; $PROFILE\n\n# Verificar se diret\u00f3rio existe\nTest-Path \"$HOME\\.pyenv\\pyenv-win\\bin\"\n</code></pre>"},{"location":"pyenv/#macoslinux","title":"\ud83c\udf4e macOS/Linux:","text":"<pre><code># Verificar instala\u00e7\u00e3o\nwhich pyenv\n\n# Recarregar shell config\nsource ~/.zshrc  # ou ~/.bashrc\n</code></pre>"},{"location":"pyenv/#falha-no-pyenv-install","title":"\u274c Falha no \"pyenv install\"","text":""},{"location":"pyenv/#windows_1","title":"\ud83e\ude9f Windows:","text":"<ul> <li>Problema: Falha no download/compila\u00e7\u00e3o</li> <li>Solu\u00e7\u00e3o: Usar instalador oficial do Python</li> </ul>"},{"location":"pyenv/#linux","title":"\ud83d\udc27 Linux:","text":"<pre><code># Instalar depend\u00eancias em falta\nsudo apt-get install -y build-essential libssl-dev zlib1g-dev\n</code></pre>"},{"location":"pyenv/#poetry-nao-usa-versao-correta","title":"\u274c Poetry n\u00e3o usa vers\u00e3o correta","text":"<pre><code># Verificar vers\u00e3o atual\npyenv which python\npython --version\n\n# For\u00e7ar Poetry a usar vers\u00e3o espec\u00edfica\npoetry env remove python  # Remove ambiente existente\npoetry env use $(pyenv which python)\npoetry install\n</code></pre>"},{"location":"pyenv/#arquivo-python-version-ignorado","title":"\u274c Arquivo .python-version ignorado","text":"<pre><code># Verificar se arquivo existe\ncat .python-version\n\n# Verificar se pyenv est\u00e1 detectando\npyenv version\n\n# Se necess\u00e1rio, recriar\npyenv local 3.12.7\n</code></pre>"},{"location":"pyenv/#comandos-de-referencia","title":"\ud83d\udcca Comandos de Refer\u00eancia","text":""},{"location":"pyenv/#informacoes","title":"\ud83d\udd0d Informa\u00e7\u00f5es","text":"<pre><code>pyenv --version          # Vers\u00e3o do pyenv\npyenv versions           # Vers\u00f5es instaladas\npyenv which python       # Caminho do Python ativo\npyenv root              # Diret\u00f3rio de instala\u00e7\u00e3o\n</code></pre>"},{"location":"pyenv/#versoes","title":"\ud83c\udfaf Vers\u00f5es","text":"<pre><code>pyenv install --list    # Vers\u00f5es dispon\u00edveis\npyenv install 3.12.7    # Instalar vers\u00e3o\npyenv uninstall 3.11.0  # Desinstalar vers\u00e3o\n</code></pre>"},{"location":"pyenv/#configuracao","title":"\u2699\ufe0f Configura\u00e7\u00e3o","text":"<pre><code>pyenv global 3.12.7     # Vers\u00e3o global\npyenv local 3.12.7      # Vers\u00e3o local (projeto)\npyenv shell 3.11.0      # Vers\u00e3o tempor\u00e1ria (sess\u00e3o)\n</code></pre>"},{"location":"pyenv/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<p>Agora que o Pyenv est\u00e1 configurado:</p> <ul> <li>\u2699\ufe0f Configure o Projeto: \u2699\ufe0f Setup</li> <li>\ud83d\ude80 Execute o Pipeline: \ud83d\udccb Pipeline</li> <li>\ud83e\uddea Execute os Testes: \ud83e\uddea Tests</li> <li>\ud83d\udd0d Configure Pre-commit: \ud83d\udd0d Pre-commit</li> </ul>"},{"location":"setup/","title":"\u2699\ufe0f Setup \u2014 Configura\u00e7\u00e3o do Ambiente","text":"<p>Esta p\u00e1gina mostra passo a passo como configurar sua m\u00e1quina para rodar este projeto: instalar o Python, Poetry e executar a configura\u00e7\u00e3o inicial.</p>"},{"location":"setup/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>Para executar este projeto voc\u00ea precisar\u00e1 de:</p> <ul> <li>\ud83d\udc0d Python 3.12.7 (vers\u00e3o espec\u00edfica do projeto)</li> <li>\ud83d\udce6 Poetry (gerenciador de depend\u00eancias)</li> <li>\ud83d\udcbb Terminal/PowerShell configurado</li> </ul>"},{"location":"setup/#1-instalar-python","title":"\ud83d\udc0d 1. Instalar Python","text":""},{"location":"setup/#download-e-instalacao","title":"\ud83d\udce5 Download e Instala\u00e7\u00e3o","text":"<ol> <li>Baixe o Python: Acesse python.org/downloads</li> <li>Vers\u00e3o recomendada: <code>Python 3.12.7</code> (conforme <code>pyproject.toml</code>)</li> </ol>"},{"location":"setup/#importante-no-windows","title":"\u26a0\ufe0f Importante no Windows:","text":"<ul> <li>\u2705 Marque \"Add Python to PATH\" durante a instala\u00e7\u00e3o</li> <li>\u2705 Marque \"Install for all users\" (recomendado)</li> </ul>"},{"location":"setup/#verificar-instalacao","title":"\u2705 Verificar Instala\u00e7\u00e3o:","text":"<pre><code>python --version\n# Deve mostrar: Python 3.12.7\n</code></pre>"},{"location":"setup/#2-instalar-poetry","title":"\ud83d\udce6 2. Instalar Poetry","text":""},{"location":"setup/#windows-powershell","title":"\ud83e\ude9f Windows (PowerShell)","text":"<pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n</code></pre>"},{"location":"setup/#macos-linux","title":"\ud83c\udf4e macOS / \ud83d\udc27 Linux","text":"<pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre>"},{"location":"setup/#verificar-instalacao_1","title":"\u2705 Verificar Instala\u00e7\u00e3o:","text":"<pre><code>poetry --version\n# Deve mostrar: Poetry (version 1.x.x)\n</code></pre>"},{"location":"setup/#3-configurar-path-se-necessario","title":"\ud83d\udd27 3. Configurar PATH (se necess\u00e1rio)","text":"<p>Se o comando <code>poetry</code> n\u00e3o for reconhecido:</p>"},{"location":"setup/#windows","title":"\ud83e\ude9f Windows:","text":"<ul> <li>Adicione ao PATH: <code>%USERPROFILE%\\AppData\\Roaming\\Python\\Scripts</code></li> </ul>"},{"location":"setup/#macos-linux_1","title":"\ud83c\udf4e macOS / \ud83d\udc27 Linux:","text":"<ul> <li>Adicione ao PATH: <code>~/.local/bin</code></li> </ul>"},{"location":"setup/#reinicie-o-terminal-apos-alterar-o-path","title":"\ud83d\udd04 Reinicie o terminal ap\u00f3s alterar o PATH","text":""},{"location":"setup/#4-configurar-o-projeto","title":"\ud83d\ude80 4. Configurar o Projeto","text":""},{"location":"setup/#clone-o-repositorio","title":"\ud83d\udcc1 Clone o Reposit\u00f3rio:","text":"<pre><code>git clone &lt;URL-DO-REPO&gt;\ncd estrutura_workshop\n</code></pre>"},{"location":"setup/#instalar-dependencias","title":"\ud83d\udce6 Instalar Depend\u00eancias:","text":"<pre><code>poetry install\n</code></pre> <p>Este comando ir\u00e1: - \u2705 Criar ambiente virtual automaticamente - \u2705 Instalar todas as depend\u00eancias do <code>pyproject.toml</code> - \u2705 Instalar depend\u00eancias de desenvolvimento (pytest, black, etc.)</p>"},{"location":"setup/#verificar-ambiente","title":"\ud83d\udd0d Verificar Ambiente:","text":"<pre><code>poetry env info\n</code></pre>"},{"location":"setup/#5-primeiros-comandos","title":"\u26a1 5. Primeiros Comandos","text":""},{"location":"setup/#executar-testes","title":"\ud83e\uddea Executar Testes:","text":"<pre><code>poetry run pytest -q\n</code></pre>"},{"location":"setup/#executar-pipeline","title":"\ud83d\ude80 Executar Pipeline:","text":"<pre><code>poetry run python src/main.py\n</code></pre>"},{"location":"setup/#ativar-shell-do-poetry","title":"\ud83d\udc1a Ativar Shell do Poetry:","text":"<pre><code>poetry shell\n# Agora voc\u00ea pode usar comandos diretos:\npython src/main.py\npytest -q\n</code></pre>"},{"location":"setup/#visualizar-documentacao","title":"\ud83d\udcd6 Visualizar Documenta\u00e7\u00e3o:","text":"<pre><code>poetry run mkdocs serve\n</code></pre>"},{"location":"setup/#alternativas-e-opcoes-avancadas","title":"\ud83d\udee0\ufe0f Alternativas e Op\u00e7\u00f5es Avan\u00e7adas","text":""},{"location":"setup/#usando-pyenv-recomendado-para-multiplas-versoes","title":"\ud83d\udc0d Usando Pyenv (Recomendado para M\u00faltiplas Vers\u00f5es)","text":"<p>Se voc\u00ea trabalha com diferentes projetos Python:</p> <ol> <li>Instale o Pyenv: Veja \ud83d\udccb Pyenv</li> <li>Configure a vers\u00e3o:    <pre><code>pyenv install 3.12.7\npyenv local 3.12.7\n</code></pre></li> <li>Configure Poetry:    <pre><code>poetry env use 3.12.7\n</code></pre></li> </ol>"},{"location":"setup/#problemas-comuns","title":"\ud83d\udd27 Problemas Comuns","text":""},{"location":"setup/#poetry-install-falha-linux","title":"\u274c <code>poetry install</code> falha (Linux):","text":"<p>Solu\u00e7\u00e3o: Instale depend\u00eancias do sistema: <pre><code>sudo apt-get install build-essential libssl-dev zlib1g-dev\n</code></pre></p>"},{"location":"setup/#poetry-nao-reconhecido","title":"\u274c <code>poetry</code> n\u00e3o reconhecido:","text":"<p>Solu\u00e7\u00e3o: Verifique se est\u00e1 no PATH ou reinstale <pre><code># Reinstalar Poetry\ncurl -sSL https://install.python-poetry.org | python3 - --uninstall\ncurl -sSL https://install.python-poetry.org | python3 -\n</code></pre></p>"},{"location":"setup/#versao-errada-do-python","title":"\u274c Vers\u00e3o errada do Python:","text":"<p>Solu\u00e7\u00e3o: Force a vers\u00e3o correta: <pre><code>poetry env use python3.12\n# ou caminho completo:\npoetry env use /usr/bin/python3.12\n</code></pre></p>"},{"location":"setup/#checklist-de-verificacao","title":"\u2705 Checklist de Verifica\u00e7\u00e3o","text":"<p>Antes de continuar, certifique-se de que:</p> <ul> <li>[ ] \ud83d\udc0d Python 3.12.7 est\u00e1 instalado</li> <li>[ ] \ud83d\udce6 Poetry est\u00e1 funcionando (<code>poetry --version</code>)</li> <li>[ ] \ud83d\udcc1 Projeto foi clonado localmente</li> <li>[ ] \ud83d\udd27 <code>poetry install</code> executado com sucesso</li> <li>[ ] \ud83e\uddea Testes passam (<code>poetry run pytest -q</code>)</li> </ul>"},{"location":"setup/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<p>Agora que o ambiente est\u00e1 configurado:</p> <ul> <li>\ud83d\ude80 Execute o Pipeline: \ud83d\udccb Pipeline</li> <li>\ud83e\uddea Execute os Testes: \ud83e\uddea Tests</li> <li>\ud83d\udd04 Configure CI/CD: \ud83d\ude80 CI</li> <li>\ud83d\udcd6 Explore o C\u00f3digo: \ud83d\udcbb Documenta\u00e7\u00e3o do C\u00f3digo</li> </ul>"},{"location":"tests/","title":"\ud83e\uddea Tests \u2014 Testes Automatizados","text":"<p>Esta p\u00e1gina documenta os testes existentes no projeto, explica como execut\u00e1-los e interpretar os resultados.</p>"},{"location":"tests/#visao-geral-dos-testes","title":"\ud83c\udfaf Vis\u00e3o Geral dos Testes","text":"<p>O projeto utiliza pytest para testes automatizados, garantindo:</p> <ul> <li>\u2705 Qualidade do c\u00f3digo</li> <li>\u2705 Funcionamento correto das fun\u00e7\u00f5es</li> <li>\u2705 Preven\u00e7\u00e3o de regress\u00f5es</li> <li>\u2705 Cobertura de c\u00f3digo</li> </ul>"},{"location":"tests/#executando-os-testes","title":"\ud83d\ude80 Executando os Testes","text":""},{"location":"tests/#execucao-rapida","title":"\u26a1 Execu\u00e7\u00e3o R\u00e1pida:","text":"<pre><code># Usando task do Poetry (recomendado)\npoetry run task test\n</code></pre>"},{"location":"tests/#execucao-manual","title":"\ud83d\udd27 Execu\u00e7\u00e3o Manual:","text":"<pre><code># Todos os testes (modo silencioso)\npoetry run pytest -q\n\n# Todos os testes (modo verboso)\npoetry run pytest -vv\n\n# Testes com cobertura\npoetry run pytest --cov=src\n\n# Teste espec\u00edfico\npoetry run pytest tests/test_transform.py -q\n</code></pre>"},{"location":"tests/#comandos-uteis","title":"\ud83d\udd0d Comandos \u00dateis:","text":"<pre><code># Apenas testes que cont\u00eam \"transform\"\npoetry run pytest -k transform -q\n\n# Parar no primeiro erro\npoetry run pytest -x\n\n# Executar em paralelo (se instalado pytest-xdist)\npoetry run pytest -n auto\n</code></pre>"},{"location":"tests/#estrutura-dos-testes","title":"\ud83d\udcc1 Estrutura dos Testes","text":"<pre><code>tests/\n\u251c\u2500\u2500 \ud83e\uddea test_extract.py      # Testes do m\u00f3dulo de extra\u00e7\u00e3o\n\u251c\u2500\u2500 \ud83d\udd04 test_transform.py    # Testes do m\u00f3dulo de transforma\u00e7\u00e3o\n\u251c\u2500\u2500 \ud83d\udce4 test_load.py         # Testes do m\u00f3dulo de carregamento\n\u2514\u2500\u2500 \ud83d\udd17 test_pipeline.py     # Teste de integra\u00e7\u00e3o completa\n</code></pre>"},{"location":"tests/#test_transformpy","title":"\ud83d\udd04 test_transform.py","text":""},{"location":"tests/#objetivo-validar-a-funcao-transform_data-concatenacao-de-dataframes","title":"\ud83c\udfaf Objetivo: Validar a fun\u00e7\u00e3o <code>transform_data</code> (concatena\u00e7\u00e3o de DataFrames)","text":""},{"location":"tests/#testes-incluidos","title":"\u2705 Testes Inclu\u00eddos:","text":""},{"location":"tests/#test_concat_two_dataframes","title":"\ud83d\udcca <code>test_concat_two_dataframes</code>","text":"<ul> <li>Verifica: Concatena\u00e7\u00e3o de dois DataFrames com mesmas colunas</li> <li>Compara: Resultado com <code>pd.concat</code> esperado</li> </ul>"},{"location":"tests/#test_single_dataframe_returns_same_dataframe","title":"\ud83d\udccb <code>test_single_dataframe_returns_same_dataframe</code>","text":"<ul> <li>Verifica: Lista com \u00fanico DataFrame retorna igual</li> <li>Garante: Comportamento correto com entrada m\u00ednima</li> </ul>"},{"location":"tests/#test_empty_list_raises_value_error","title":"\u274c <code>test_empty_list_raises_value_error</code>","text":"<ul> <li>Verifica: Lista vazia lan\u00e7a <code>ValueError</code></li> <li>Valida: Tratamento de erro adequado</li> </ul>"},{"location":"tests/#test_concat_different_columns_creates_union_and_fills_nan","title":"\ud83d\udd00 <code>test_concat_different_columns_creates_union_and_fills_nan</code>","text":"<ul> <li>Verifica: Concatena\u00e7\u00e3o com colunas diferentes</li> <li>Valida: Uni\u00e3o de colunas e preenchimento com NaN</li> </ul>"},{"location":"tests/#dicas-de-depuracao","title":"\ud83d\udd0d Dicas de Depura\u00e7\u00e3o:","text":"<pre><code># Executar apenas testes de transform\npoetry run pytest -k transform -vv\n</code></pre>"},{"location":"tests/#test_loadpy","title":"\ud83d\udce4 test_load.py","text":""},{"location":"tests/#objetivo-validar-a-funcao-load_to_excel-salvamento-em-excel","title":"\ud83c\udfaf Objetivo: Validar a fun\u00e7\u00e3o <code>load_to_excel</code> (salvamento em Excel)","text":""},{"location":"tests/#testes-incluidos_1","title":"\u2705 Testes Inclu\u00eddos:","text":""},{"location":"tests/#test_load_to_excel_creates_file_and_returns_message","title":"\ud83d\udcbe <code>test_load_to_excel_creates_file_and_returns_message</code>","text":"<ul> <li>Verifica: Arquivo \u00e9 criado corretamente</li> <li>Valida: Mensagem de sucesso retornada</li> <li>Compara: Arquivo salvo vs DataFrame original</li> </ul>"},{"location":"tests/#test_load_to_excel_creates_nested_dir_if_missing","title":"\ud83d\udcc1 <code>test_load_to_excel_creates_nested_dir_if_missing</code>","text":"<ul> <li>Verifica: Cria\u00e7\u00e3o autom\u00e1tica de diret\u00f3rios</li> <li>Usa: <code>tmp_path</code> para testes isolados</li> </ul>"},{"location":"tests/#sobre-tmp_path","title":"\ud83d\udd27 Sobre tmp_path:","text":"<ul> <li>Fixture do pytest que cria diret\u00f3rio tempor\u00e1rio</li> <li>Isolamento: Cada teste tem seu pr\u00f3prio diret\u00f3rio</li> <li>Limpeza: Removido automaticamente ap\u00f3s o teste</li> </ul>"},{"location":"tests/#test_extractpy","title":"\ud83d\udce5 test_extract.py","text":""},{"location":"tests/#objetivo-validar-a-funcao-extract_from_excel-leitura-de-excel","title":"\ud83c\udfaf Objetivo: Validar a fun\u00e7\u00e3o <code>extract_from_excel</code> (leitura de Excel)","text":""},{"location":"tests/#testes-incluidos_2","title":"\u2705 Testes Inclu\u00eddos:","text":"<ul> <li>Leitura de arquivos Excel v\u00e1lidos</li> <li>Tratamento de diret\u00f3rios vazios</li> <li>Valida\u00e7\u00e3o do formato de retorno</li> </ul>"},{"location":"tests/#test_pipelinepy","title":"\ud83d\udd17 test_pipeline.py","text":""},{"location":"tests/#objetivo-teste-de-integracao-do-pipeline-completo","title":"\ud83c\udfaf Objetivo: Teste de integra\u00e7\u00e3o do pipeline completo","text":""},{"location":"tests/#abordagem-com-mocks","title":"\ud83c\udfad Abordagem com Mocks:","text":"<ul> <li>Usa: <code>monkeypatch</code> para injetar mocks</li> <li>Executa: <code>src/main.py</code> completo via <code>runpy.run_path</code></li> <li>Verifica: Chamadas corretas para fun\u00e7\u00f5es do pipeline</li> <li>Valida: Sa\u00edda impressa no console</li> </ul>"},{"location":"tests/#por-que-usar-mocks","title":"\ud83d\udd04 Por que usar mocks?:","text":"<ul> <li>\u2705 Velocidade: Evita I/O real de arquivos</li> <li>\u2705 Determinismo: Resultados previs\u00edveis</li> <li>\u2705 Isolamento: Testa apenas a l\u00f3gica de orquestra\u00e7\u00e3o</li> </ul>"},{"location":"tests/#interpretando-resultados","title":"\ud83d\udcca Interpretando Resultados","text":""},{"location":"tests/#sucesso","title":"\u2705 Sucesso:","text":"<pre><code>======================== 8 passed in 0.45s ========================\n</code></pre>"},{"location":"tests/#falha","title":"\u274c Falha:","text":"<pre><code>FAILED tests/test_transform.py::test_concat_two_dataframes - AssertionError\n</code></pre>"},{"location":"tests/#com-cobertura","title":"\ud83d\udcc8 Com Cobertura:","text":"<pre><code>---------- coverage: platform win32, python 3.12.7 -----------\nName                     Stmts   Miss  Cover\n--------------------------------------------\nsrc\\main.py                 10      0   100%\nsrc\\pipeline\\extract.py     15      2    87%\nsrc\\pipeline\\load.py        12      0   100%\nsrc\\pipeline\\transform.py    8      0   100%\n--------------------------------------------\nTOTAL                       45      2    96%\n</code></pre>"},{"location":"tests/#adicionando-novos-testes","title":"\ud83d\udee0\ufe0f Adicionando Novos Testes","text":""},{"location":"tests/#boas-praticas","title":"\ud83d\udccb Boas Pr\u00e1ticas:","text":""},{"location":"tests/#use-fixtures-do-pytest","title":"\ud83d\udd27 Use fixtures do pytest:","text":"<pre><code>def test_example(tmp_path):\n    # tmp_path cria diret\u00f3rio tempor\u00e1rio\n    test_file = tmp_path / \"test.xlsx\"\n</code></pre>"},{"location":"tests/#crie-dataframes-pequenos","title":"\ud83d\udcca Crie DataFrames pequenos:","text":"<pre><code>df = pd.DataFrame({\"col1\": [1, 2], \"col2\": [\"a\", \"b\"]})\n</code></pre>"},{"location":"tests/#use-asserts-especificos","title":"\u2705 Use asserts espec\u00edficos:","text":"<pre><code>import pandas.testing as pdt\npdt.assert_frame_equal(result, expected)\n</code></pre>"},{"location":"tests/#integracao-com-cicd","title":"\ud83d\ude80 Integra\u00e7\u00e3o com CI/CD","text":"<p>Os testes s\u00e3o executados automaticamente:</p> <ul> <li>\ud83d\udd04 Em cada commit (via GitHub Actions)</li> <li>\ud83d\udcca Com relat\u00f3rio de cobertura (Codecov)</li> <li>\u2705 Antes de merge (prote\u00e7\u00e3o de branch)</li> </ul> <p>Veja mais detalhes em \ud83d\ude80 CI.</p>"},{"location":"tests/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83d\ude80 Execute o Pipeline: \ud83d\udccb Pipeline</li> <li>\ud83d\udcbb Explore o C\u00f3digo: \ud83d\udcd6 Documenta\u00e7\u00e3o do C\u00f3digo</li> <li>\ud83d\udd27 Configure CI: \ud83d\ude80 CI</li> </ul>"},{"location":"transform/","title":"\u2699\ufe0f Transform \u2014 M\u00f3dulo de Transforma\u00e7\u00e3o","text":"<p>Este m\u00f3dulo \u00e9 respons\u00e1vel pela transforma\u00e7\u00e3o e consolida\u00e7\u00e3o dos dados extra\u00eddos no pipeline ETL.</p>"},{"location":"transform/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>O m\u00f3dulo <code>transform.py</code> \u00e9 o segundo est\u00e1gio do pipeline ETL, respons\u00e1vel por:</p> <ul> <li>\ud83d\udd04 Concatenar m\u00faltiplos DataFrames em um \u00fanico</li> <li>\u2705 Validar dados de entrada</li> <li>\ud83e\uddf9 Limpar e organizar estrutura dos dados</li> <li>\ud83d\udcca Preparar dados para carregamento</li> </ul>"},{"location":"transform/#funcionalidades","title":"\ud83d\udd27 Funcionalidades","text":""},{"location":"transform/#capacidades","title":"\u2705 Capacidades:","text":"<ul> <li>\ud83d\udd17 Concatena\u00e7\u00e3o eficiente com pandas</li> <li>\ud83d\udd0d Valida\u00e7\u00e3o de entrada (lista n\u00e3o vazia)</li> <li>\ud83d\udccb Preserva\u00e7\u00e3o de estrutura de colunas</li> <li>\ud83e\uddf9 Reset autom\u00e1tico de \u00edndices</li> </ul>"},{"location":"transform/#performance","title":"\u26a1 Performance:","text":"<ul> <li>\ud83d\ude80 Opera\u00e7\u00e3o otimizada com <code>pd.concat()</code></li> <li>\ud83d\udcbe Uso eficiente de mem\u00f3ria</li> <li>\ud83d\udd04 Processamento em lote</li> </ul>"},{"location":"transform/#documentacao-da-api","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o da API","text":""},{"location":"transform/#funcao-principal","title":"\ud83c\udfaf Fun\u00e7\u00e3o Principal","text":"<p>Concatenate a list of DataFrames into a single DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>data_list</code> <code>list[DataFrame]</code> <p>list of pandas DataFrame objects</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: concatenated dataframe</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if data_list is empty</p> Source code in <code>src/pipeline/transform.py</code> <pre><code>def transform_data(data_list: list[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"Concatenate a list of DataFrames into a single DataFrame.\n\n    Args:\n        data_list: list of pandas DataFrame objects\n\n    Returns:\n        pandas.DataFrame: concatenated dataframe\n\n    Raises:\n        ValueError: if data_list is empty\n    \"\"\"\n\n    if not data_list:\n        raise ValueError(\"data_list must contain at least one DataFrame\")\n\n    return pd.concat(data_list, ignore_index=True)\n</code></pre>"},{"location":"transform/#exemplos-de-uso","title":"\ud83d\udcbb Exemplos de Uso","text":""},{"location":"transform/#uso-basico","title":"\ud83d\udd04 Uso B\u00e1sico","text":"<pre><code>from pipeline.transform import transform_data\nimport pandas as pd\n\n# Dados de exemplo\ndf1 = pd.DataFrame({\"nome\": [\"Ana\", \"Bruno\"], \"idade\": [25, 30]})\ndf2 = pd.DataFrame({\"nome\": [\"Carlos\", \"Diana\"], \"idade\": [35, 28]})\n\n# Concatenar DataFrames\nresultado = transform_data([df1, df2])\nprint(resultado)\n#      nome  idade\n# 0     Ana     25\n# 1   Bruno     30\n# 2  Carlos     35\n# 3   Diana     28\n</code></pre>"},{"location":"transform/#validacao-de-entrada","title":"\ud83d\udd0d Valida\u00e7\u00e3o de Entrada","text":"<pre><code># Lista vazia gera erro\ntry:\n    resultado = transform_data([])\nexcept ValueError as e:\n    print(f\"\u274c Erro: {e}\")\n    # Sa\u00edda: Erro: data_list must contain at least one DataFrame\n\n# Lista v\u00e1lida\ndata_list = [df1, df2]\nif data_list:\n    resultado = transform_data(data_list)\n    print(f\"\u2705 Dados consolidados: {resultado.shape}\")\n</code></pre>"},{"location":"transform/#colunas-diferentes","title":"\ud83d\udd00 Colunas Diferentes","text":"<pre><code># DataFrames com colunas diferentes\ndf1 = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})\ndf2 = pd.DataFrame({\"B\": [5, 6], \"C\": [7, 8]})\n\nresultado = transform_data([df1, df2])\nprint(resultado)\n#      A    B    C\n# 0  1.0    3  NaN\n# 1  2.0    4  NaN\n# 2  NaN    5  7.0\n# 3  NaN    6  8.0\n</code></pre>"},{"location":"transform/#fluxo-de-execucao","title":"\ud83d\udd04 Fluxo de Execu\u00e7\u00e3o","text":"<pre><code>graph LR\n    A[\ud83d\udccb Lista DataFrames] --&gt; B{\ud83d\udd0d Lista Vazia?}\n    B --&gt;|\u2705 N\u00e3o| C[\ud83d\udd17 pd.concat()]\n    B --&gt;|\u274c Sim| D[\ud83d\udeab ValueError]\n    C --&gt; E[\ud83d\udcca ignore_index=True]\n    E --&gt; F[\ud83d\udce4 DataFrame Final]\n\n    style A fill:#e3f2fd\n    style C fill:#f3e5f5\n    style F fill:#e8f5e8\n    style D fill:#ffebee</code></pre>"},{"location":"transform/#comportamento-detalhado","title":"\u2699\ufe0f Comportamento Detalhado","text":""},{"location":"transform/#concatenacao","title":"\ud83d\udd17 Concatena\u00e7\u00e3o","text":"<ul> <li>M\u00e9todo: <code>pd.concat(data_list, ignore_index=True)</code></li> <li>Eixo: Vertical (linhas) - <code>axis=0</code> (padr\u00e3o)</li> <li>\u00cdndices: Reset autom\u00e1tico com <code>ignore_index=True</code></li> <li>Jun\u00e7\u00e3o: Outer join (uni\u00e3o de todas as colunas)</li> </ul>"},{"location":"transform/#tratamento-de-colunas","title":"\ud83d\udcca Tratamento de Colunas","text":"<ul> <li>Colunas iguais: Dados concatenados normalmente</li> <li>Colunas diferentes: Uni\u00e3o de todas + preenchimento com <code>NaN</code></li> <li>Ordem: Preservada conforme apari\u00e7\u00e3o nos DataFrames</li> </ul>"},{"location":"transform/#limpeza-de-dados","title":"\ud83e\uddf9 Limpeza de Dados","text":"<ul> <li>\u00cdndices: Reset para sequ\u00eancia 0, 1, 2, ...</li> <li>Tipos: Preservados quando poss\u00edvel</li> <li>NaN: Preenchimento autom\u00e1tico para colunas ausentes</li> </ul>"},{"location":"transform/#validacao-e-tratamento-de-erros","title":"\ud83d\udee0\ufe0f Valida\u00e7\u00e3o e Tratamento de Erros","text":""},{"location":"transform/#validacoes-implementadas","title":"\u2705 Valida\u00e7\u00f5es Implementadas","text":""},{"location":"transform/#lista-vazia","title":"\ud83d\udccb Lista vazia","text":"<pre><code>if not data_list:\n    raise ValueError(\"data_list must contain at least one DataFrame\")\n</code></pre>"},{"location":"transform/#cenarios-de-erro","title":"\u274c Cen\u00e1rios de Erro","text":""},{"location":"transform/#tipo-incorreto","title":"\ud83d\udcc4 Tipo incorreto","text":"<pre><code># Erro: item n\u00e3o \u00e9 DataFrame\ntry:\n    resultado = transform_data([df1, \"n\u00e3o \u00e9 dataframe\"])\nexcept AttributeError as e:\n    print(f\"\u274c Tipo inv\u00e1lido: {e}\")\n</code></pre>"},{"location":"transform/#dataframes-vazios","title":"\ud83d\udd04 DataFrames vazios","text":"<pre><code># DataFrame vazio \u00e9 aceito\ndf_vazio = pd.DataFrame()\nresultado = transform_data([df1, df_vazio])\n# Resultado: apenas dados de df1\n</code></pre>"},{"location":"transform/#melhorias-possiveis","title":"\ud83d\ude80 Melhorias Poss\u00edveis","text":""},{"location":"transform/#validacao-avancada","title":"\ud83d\udd27 Valida\u00e7\u00e3o Avan\u00e7ada","text":"<pre><code>def transform_data_enhanced(data_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"Vers\u00e3o com valida\u00e7\u00f5es extras\"\"\"\n\n    # Validar entrada\n    if not data_list:\n        raise ValueError(\"Lista n\u00e3o pode estar vazia\")\n\n    # Validar tipos\n    for i, df in enumerate(data_list):\n        if not isinstance(df, pd.DataFrame):\n            raise TypeError(f\"Item {i} n\u00e3o \u00e9 DataFrame\")\n\n    # Filtrar DataFrames vazios\n    valid_dfs = [df for df in data_list if not df.empty]\n\n    if not valid_dfs:\n        raise ValueError(\"Todos os DataFrames est\u00e3o vazios\")\n\n    return pd.concat(valid_dfs, ignore_index=True)\n</code></pre>"},{"location":"transform/#schema-validation","title":"\ud83d\udcca Schema Validation","text":"<pre><code>def validate_common_schema(data_list: List[pd.DataFrame]) -&gt; bool:\n    \"\"\"Verifica se todos DataFrames t\u00eam as mesmas colunas\"\"\"\n\n    if not data_list:\n        return False\n\n    base_columns = set(data_list[0].columns)\n\n    for df in data_list[1:]:\n        if set(df.columns) != base_columns:\n            return False\n\n    return True\n</code></pre>"},{"location":"transform/#limpeza-de-dados_1","title":"\ud83e\uddf9 Limpeza de Dados","text":"<pre><code>def transform_with_cleaning(data_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"Transforma\u00e7\u00e3o com limpeza b\u00e1sica\"\"\"\n\n    result = transform_data(data_list)\n\n    # Remover linhas completamente vazias\n    result = result.dropna(how='all')\n\n    # Remover duplicatas\n    result = result.drop_duplicates()\n\n    # Reset do \u00edndice\n    result = result.reset_index(drop=True)\n\n    return result\n</code></pre>"},{"location":"transform/#casos-de-uso-avancados","title":"\ud83d\udcca Casos de Uso Avan\u00e7ados","text":""},{"location":"transform/#concatenacao-com-identificador","title":"\ud83d\udd00 Concatena\u00e7\u00e3o com Identificador","text":"<pre><code>def transform_with_source(data_list: List[pd.DataFrame],\n                         source_names: List[str]) -&gt; pd.DataFrame:\n    \"\"\"Adiciona coluna identificando fonte dos dados\"\"\"\n\n    dfs_with_source = []\n    for df, source in zip(data_list, source_names):\n        df_copy = df.copy()\n        df_copy['fonte'] = source\n        dfs_with_source.append(df_copy)\n\n    return pd.concat(dfs_with_source, ignore_index=True)\n</code></pre>"},{"location":"transform/#concatenacao-seletiva","title":"\ud83c\udfaf Concatena\u00e7\u00e3o Seletiva","text":"<pre><code>def transform_specific_columns(data_list: List[pd.DataFrame],\n                              columns: List[str]) -&gt; pd.DataFrame:\n    \"\"\"Concatena apenas colunas espec\u00edficas\"\"\"\n\n    filtered_dfs = []\n    for df in data_list:\n        # Selecionar apenas colunas que existem\n        available_cols = [col for col in columns if col in df.columns]\n        if available_cols:\n            filtered_dfs.append(df[available_cols])\n\n    return pd.concat(filtered_dfs, ignore_index=True)\n</code></pre>"},{"location":"transform/#testes","title":"\ud83e\uddea Testes","text":""},{"location":"transform/#testes-incluidos","title":"\ud83d\udccb Testes Inclu\u00eddos","text":"<ul> <li>\u2705 Concatena\u00e7\u00e3o de dois DataFrames iguais</li> <li>\u2705 DataFrame \u00fanico retorna igual</li> <li>\u2705 Lista vazia gera ValueError</li> <li>\u2705 Colunas diferentes criam uni\u00e3o + NaN</li> </ul>"},{"location":"transform/#executar-testes","title":"\ud83d\udd27 Executar Testes","text":"<pre><code># Testes espec\u00edficos do m\u00f3dulo transform\npoetry run pytest tests/test_transform.py -v\n\n# Com cobertura\npoetry run pytest tests/test_transform.py --cov=src.pipeline.transform\n</code></pre>"},{"location":"transform/#teste-manual","title":"\ud83e\uddea Teste Manual","text":"<pre><code># Teste r\u00e1pido da fun\u00e7\u00e3o\nfrom pipeline.transform import transform_data\nimport pandas as pd\n\n# Criar dados de teste\ndf1 = pd.DataFrame({\"x\": [1, 2], \"y\": [3, 4]})\ndf2 = pd.DataFrame({\"x\": [5, 6], \"y\": [7, 8]})\n\n# Testar transforma\u00e7\u00e3o\nresult = transform_data([df1, df2])\nassert len(result) == 4\nassert list(result.columns) == [\"x\", \"y\"]\nprint(\"\u2705 Teste manual passou!\")\n</code></pre>"},{"location":"transform/#proximos-passos","title":"\ud83d\udd17 Pr\u00f3ximos Passos","text":"<ul> <li>\ud83d\udce4 Load: \ud83d\udce4 Load - Pr\u00f3ximo est\u00e1gio do pipeline</li> <li>\ud83d\udce5 Extract: \ud83d\udce5 Extract - Est\u00e1gio anterior</li> <li>\ud83c\udfaf Main: \ud83c\udfaf Main - Orquestra\u00e7\u00e3o completa</li> <li>\ud83d\udcd6 Overview: \ud83d\udcd6 C\u00f3digo - Vis\u00e3o geral da arquitetura</li> </ul>"}]}