name: Push -> test, create PR and approval issue

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  push:
    branches:
      - "feature/**"
      - "test/**"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt || true
          python -m pip install "pytest>=8.4.2,<9.0.0"
      - name: Run tests
        run: python -m pytest -q --maxfail=1

  create_pr:
    name: Create or update PR to dev
    needs: test
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create.outputs.pr_number }}
      pr_html_url: ${{ steps.create.outputs.pr_html_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create or update PR to dev
        id: create
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.ref.replace('refs/heads/','');
            const title = `chore: sync ${branch} -> dev`;
            const body = `Automatic PR created/updated by CI after tests passed on ${branch}.`;
            const head = branch;
            const resp = await github.rest.pulls.list({ owner, repo, state: 'open', head, per_page: 100 });
            const prs = resp.data || [];
            if (!prs || prs.length === 0) {
              const createResp = await github.rest.pulls.create({ owner, repo, title, head: branch, base: 'dev', body });
              core.setOutput('pr_number', createResp.data.number.toString());
              core.setOutput('pr_html_url', createResp.data.html_url);
            } else {
              const pr = prs[0];
              await github.rest.pulls.update({ owner, repo, pull_number: pr.number, title, body });
              core.setOutput('pr_number', pr.number.toString());
              core.setOutput('pr_html_url', pr.html_url);
            }

  create_issue:
    name: Create approval issue
    needs: create_pr
    runs-on: ubuntu-latest
    if: needs.create_pr.outputs.pr_number != ''
    steps:
      - name: Create approval issue for PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt('${{ needs.create_pr.outputs.pr_number }}', 10);
            const prUrl = '${{ needs.create_pr.outputs.pr_html_url }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.ref.replace('refs/heads/','');
            const issueTitle = `Approval needed: PR #${prNumber}`;
            const issueBody = `PR [#${prNumber}](${prUrl}) from branch \`${branch}\` passed CI.\n\nTo approve and merge this PR into \`dev\`, comment on this issue with:\n\n/approve-pr #${prNumber}\n`;
            const issuesResp = await github.rest.issues.listForRepo({ owner, repo, state: 'open', per_page: 100 });
            const issues = issuesResp.data || [];
            if (!issues.find(i => i.title === issueTitle)) {
              await github.rest.issues.create({ owner, repo, title: issueTitle, body: issueBody });
            } else {
              core.info('Issue already exists');
            }
