name: Dev PRs â€” test and create approval issue

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  push:
    # run on feature branches and the test automation branch
    branches:
      - 'feature/**'
      - 'test/auto-flow'

jobs:
  test:
    name: Run tests for pushed branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install "pandas>=2.3.3,<3.0.0" "openpyxl>=3.1.5,<4.0.0"
          python -m pip install "pytest>=8.4.2,<9.0.0" "pytest-cov>=4.0.0,<5.0.0"

      - name: Run tests
        run: python -m pytest -q --maxfail=1

  create-or-update-pr:
    name: Create or update PR to dev
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create or update PR to dev
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: sync ${{ github.ref_name }} -> dev (CI)"
          title: "chore: sync ${{ github.ref_name }} -> dev"
          body: "Automatic PR created/updated by CI after tests passed on ${{ github.ref_name }}."
          base: dev
          branch: ${{ github.ref_name }}

  create-approval-issue:
    name: Create approval issue (after PR exists and tests passed)
    needs: [test, create-or-update-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Find PR for branch
        id: find_pr
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = `${owner}:${github.ref.replace('refs/heads/','')}`;
            const resp = await github.pulls.list({ owner, repo, state: 'open', head, per_page: 100 });
            const prs = resp.data || [];
            if (!prs || prs.length === 0) {
              core.setFailed(`No open PR found for branch ${github.ref}`);
              return;
            }
            const pr = prs[0];
            core.setOutput('pr_number', pr.number.toString());
            core.setOutput('pr_html_url', pr.html_url);

      - name: Create approval issue for PR
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = parseInt('${{ steps.find_pr.outputs.pr_number }}', 10);
            const prUrl = '${{ steps.find_pr.outputs.pr_html_url }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branchName = github.ref.replace('refs/heads/','');
            const issueTitle = `Approval needed: PR #${prNumber}`;
            const issueBody = `The PR [#${prNumber}](${prUrl}) from branch \`${branchName}\` passed CI.\n\nTo approve and merge this PR into \`dev\`, comment on this issue with:\n\n/approve-pr #${prNumber}\n`;

            const issuesResp = await github.issues.listForRepo({ owner, repo, state: 'open', per_page: 100 });
            const issues = issuesResp.data || [];
            const already = issues.find(i => i.title === issueTitle);
            if (already) {
              core.info(`Issue already exists: ${already.html_url}`);
              return;
            }
            const issueResp = await github.issues.create({ owner, repo, title: issueTitle, body: issueBody });
            core.info(`Created issue: ${issueResp.data.html_url}`);
